<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title><![CDATA[Game Developer]]></title><description><![CDATA[Bruno Cicanci]]></description><link>http://gamedeveloper.com.br/</link><generator>Ghost 0.7</generator><lastBuildDate>Wed, 14 Sep 2016 15:10:07 GMT</lastBuildDate><atom:link href="http://gamedeveloper.com.br/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Por que temos que jogar jogos diferentes]]></title><description><![CDATA[<p>Isto é algo que já escrevi <a href="http://gamedeveloper.com.br/jogue-bastante-mas-jogos-diferentes/">aqui no blog</a>, mas recentemente percebi que eu não estava fazendo. Ultimamente tenho jogado sempre os mesmos jogos, e isto ficou refletido nos últimos jogos que fiz participando do <a href="http://gamedeveloper.com.br/tag/ludum-dare/">Ludum Dare</a>.</p>

<p>Desde o ano passado comecei a jogar muitos jogos de tabuleiro novos pra</p>]]></description><link>http://gamedeveloper.com.br/por-que-jogar-jogos-diferentes/</link><guid isPermaLink="false">4f171d19-6868-4d26-a9ba-53bb24a0a9ac</guid><category><![CDATA[game dev]]></category><dc:creator><![CDATA[Bruno Cicanci]]></dc:creator><pubDate>Wed, 14 Sep 2016 15:09:26 GMT</pubDate><media:content url="http://gamedeveloper.com.br/content/images/2016/09/jogue-capa.jpg" medium="image"/><content:encoded><![CDATA[<img src="http://gamedeveloper.com.br/content/images/2016/09/jogue-capa.jpg" alt="Por que temos que jogar jogos diferentes"><p>Isto é algo que já escrevi <a href="http://gamedeveloper.com.br/jogue-bastante-mas-jogos-diferentes/">aqui no blog</a>, mas recentemente percebi que eu não estava fazendo. Ultimamente tenho jogado sempre os mesmos jogos, e isto ficou refletido nos últimos jogos que fiz participando do <a href="http://gamedeveloper.com.br/tag/ludum-dare/">Ludum Dare</a>.</p>

<p>Desde o ano passado comecei a jogar muitos jogos de tabuleiro novos pra mim, principalmente pelo rápido crescimento deste mercado no Brasil. Há alguns anos existiam poucos jogos e poucas empresas publicando por aqui, mas atualmente temos centenas de jogos disponíveis para todos os gostos, e muito mais está por vir. Por jogar com mais frequência jogos de tabuleiro do que jogos digitais, acabei lendo e pesquisando mais sobre eles, o que fez meu pensamento ficar limitado a mecânicas de jogos analógicos quando precisei criar algo digital.</p>

<p>Dos 5 jogos que fiz nos últimos <a href="http://gamedeveloper.com.br/tag/ludum-dare/">Ludum Dares</a>, 3 deles são claramente mecânicas de jogos analógicos, e eu não tinha percebido isto até o quinto jogo. Embora eu tenha jogado jogos de tabuleiro diferentes, muitos compartilham as mesmas mecânicas ou temas. No <a href="http://gamedeveloper.com.br/ludum-dare-35/">quarto jogo</a> que fiz comecei a perceber que estava faltando algo no game design, mas não era apenas isso, minha visão estava limitada a jogos analógicos. Tentei mudar no <a href="http://gamedeveloper.com.br/ludum-dare-36/">último jogo</a>, mas meus recursos de game design foram limitados pelas minhas experiências recentes em jogos de tabuleiro. </p>

<p>É engraçado que até neste outro jogo que estou desenvolvendo e postando aqui, o <a href="http://gamedeveloper.com.br/tag/final-frontier/">Final Frontier</a>, minhas referências iniciais também são <a href="http://gamedeveloper.com.br/inicio-do-projeto-final-frontier/">alguns jogos de tabuleiro</a>. Felizmente percebi que estava com esse pensando de mecânicas analógicas e decidi fazer algumas coisas diferentes para mudar, principalmente voltar a jogar jogos digitais. Mas, como já escrevi <a href="http://gamedeveloper.com.br/jogue-bastante-mas-jogos-diferentes/">neste post</a>, não adianta ficar jogando sempre as mesmas coisas. </p>

<p>Durante este ano inteiro eu joguei apenas 3 jogos diferentes por um tempo considerável: Destiny, Overwatch e No Man's Sky. Não adianta eu voltar a jogar os mesmos jogos se quero começar a pensar em mecânicas diferentes, por isso listei abaixo o que estou fazendo para mudar isso e voltar a pensar em mecânicas de jogos digitais para jogos digitais. Os itens se resumem a jogar jogos, porém de uma maneira que sejam diferentes e fora da zone de conforto (e sem gastar comprando vários jogos).</p>

<ul>
<li><p><a href="http://store.steampowered.com/genre/Free%20to%20Play/?tab=MostPlayedNewReleases">Jogos gratuitos no Steam</a> - eu recomendo ir na lista de lançamentos populares ao invés de ir na lista de jogos mais populares, assim você tem jogos novos, gratuitos e diferentes para jogar</p></li>
<li><p><a href="http://gamejolt.com/">Jogos gratuitos no Game Jolt</a> - este site é ótimo para publicar jogos (<a href="http://gamejolt.com/@cicanci/games">aqui estão alguns meus</a>) e também descobrir alguns jogos indie, jogue os destaques da página inicial</p></li>
<li><p><a href="https://www.humblebundle.com">Humble Bundle</a> - por $1 dólar é possível comprar um bundle de jogos (aproveite para comprar o <a href="https://www.humblebundle.com/gamemaker-bundle">GameMaker</a> esta semana lá), geralmente com jogos indie</p></li>
<li><p>Se você assina a <a href="https://www.playstation.com/en-us/explore/playstation-plus/">PSN Plus</a> ou <a href="http://www.xbox.com/pt-BR/live/games-with-gold">Xbox Live Gold</a>, todo mês tem alguns jogos grátis para jogar - eu sempre ignorava os jogos da PSN por não ser algo que eu jogaria, mas agora estou baixando e jogando.</p></li>
<li><p>Por fim, jogos gratuitos no <a href="https://play.google.com/store/apps/category/GAME">Google Play</a> e <a href="https://itunes.apple.com/us/genre/ios-games/id6014?mt=8">App Store</a> - se você já jogou os mais baixados, tente procurar por sugestões ou lançamentos.</p></li>
</ul>

<p>Esta lista acima para mais com "onde baixar jogos gratuitos" do que uma lista de estudo, mas tudo depende de como você encara isto. Minha recomendação é jogar algo novo toda semana, ou mesmo todo dia se possível, por pelo menos 1 hora e fazer anotações sobre o jogo: o que é legal, o que não é legal, quais são as mecânicas utilizadas, o que poderia ser diferente. Isto é um ótimo exercício de game design, e vai te ajudar na hora de fazer jogos. Isto é algo que eu fazia com frequência, mas aos poucos fui deixando de lado, e meus últimos jogos no Ludum Dare me mostraram as consequências de jogar sempre as mesmas coisas.</p>

<p>Jogar é muito importante para um desenvolvedor de jogos, assim como um cineasta assiste diversos filmes. Jogos também são uma forma artística de expressão, por isso é essencial sempre conhecer jogos novos (de indies a AAA) e jogá-los para se manter criativo. Espero que eu consiga mostrar estas mudanças no desenvolvimento do <a href="http://gamedeveloper.com.br/tag/final-frontier/">Final Frontier</a> e no próximo <a href="http://ludumdare.com/compo/">Ludum Dare</a> em dezembro.</p>

<p>Imagem da capa: <a href="http://www.shutterstock.com/pic-256858681/stock-vector-vector-flat-game-illustration.html?src=cnEg0puofKboBm-G1frOdA-1-40">Vector Flat Game Illustration</a> do Shutterstock.</p>]]></content:encoded></item><item><title><![CDATA[Final Frontier: Raycast, Spawn e MoSCoW]]></title><description><![CDATA[<p>Faz um mês desde o <a href="http://gamedeveloper.com.br/final-frontier-camera-e-controle/">último post</a> sobre o andamento deste projeto, mas ele não está parado. Mês passado teve o <a href="http://gamedeveloper.com.br/ludum-dare-36/">Ludum Dare #36</a> e realizei uma <a href="http://gamedeveloper.com.br/game-jams-como-fazer-um-jogo-em-48h/">palestra na USP sobre Game Jams</a>, então meu tempo livre (e os posts do blog) foram voltados a estes eventos. Agora que tudo</p>]]></description><link>http://gamedeveloper.com.br/final-frontier-raycast-e-spawn/</link><guid isPermaLink="false">1c7fbadf-739f-4538-99b6-4a882243048b</guid><category><![CDATA[final frontier]]></category><dc:creator><![CDATA[Bruno Cicanci]]></dc:creator><pubDate>Thu, 08 Sep 2016 15:07:00 GMT</pubDate><media:content url="http://gamedeveloper.com.br/content/images/2016/09/ff-capa-shoot.jpg" medium="image"/><content:encoded><![CDATA[<img src="http://gamedeveloper.com.br/content/images/2016/09/ff-capa-shoot.jpg" alt="Final Frontier: Raycast, Spawn e MoSCoW"><p>Faz um mês desde o <a href="http://gamedeveloper.com.br/final-frontier-camera-e-controle/">último post</a> sobre o andamento deste projeto, mas ele não está parado. Mês passado teve o <a href="http://gamedeveloper.com.br/ludum-dare-36/">Ludum Dare #36</a> e realizei uma <a href="http://gamedeveloper.com.br/game-jams-como-fazer-um-jogo-em-48h/">palestra na USP sobre Game Jams</a>, então meu tempo livre (e os posts do blog) foram voltados a estes eventos. Agora que tudo passou, vamos voltar ao <a href="http://gamedeveloper.com.br/tag/final-frontier/">Final Frontier</a>.</p>

<p>Desta vez vou falar sobre a substituição da colisão de objetos do tiro por Raycast, uma classe para fazer Spawn de objetos usando o design pattern Prototype e o início da organização das tarefas do projeto usando o método MoSCoW.</p>

<p><strong>Substituindo colisão do tiro por Raycast</strong></p>

<p>No último post sobre o andamento do jogo eu mencionei que iria adicionar uma mira no centro da tela para o jogador ter uma noção melhor de onde está atirando. Eu adicionei, porém o tiro ficou estranho. Como a nave está em constante movimento, o tiro (que é uma bola) estava indo bem fora da mira se a nave estivesse virando. Geralmente no início do projeto do protótipo não devemos perder tempo em melhorias, mas neste caso faria toda diferença ter um tiro mais consistente. </p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/09/ff-shoot-1-1.jpg" alt="Final Frontier: Raycast, Spawn e MoSCoW"></p>

<p>Por isso decidi implementar a técnica de <a href="https://unity3d.com/pt/learn/tutorials/topics/physics/raycasting">Raycast</a> para determinar se hoje a colisão com o objeto (então explodi-lo). A Unity tem bastante coisa implementada para auxiliar no uso do Raycast, então não é algo complicado de implementar, apenas leva um tempo para ajustar. Para desenhar a linha do tiro, que seria como um laser, pesquisei como fazer e encontrei <a href="https://unity3d.com/pt/learn/tutorials/lets-try/shooting-with-raycasts">este excelente tutorial da Unity</a> (video abaixo) que cobre também como fazer o Raycast. </p>

<iframe width="640" height="360" src="https://www.youtube.com/embed/AGd16aspnPA" frameborder="0" allowfullscreen></iframe>

<p>O resultado final ficou muito melhor do que o tiro com as bolinhas. Não é algo final, talvez eu mude isto mesmo durante o protótipo, mas agora está mais consistente para eu poder continuar desenvolvendo o jogo, principalmente para adicionar novos objetos para serem destruídos. O video abaixo também é uma ótima referencia para o uso de Raycast na Unity.</p>

<iframe width="640" height="360" src="https://www.youtube.com/embed/mpxim8YbsMk" frameborder="0" allowfullscreen></iframe>

<p><strong>Spawner de objetos com prototype</strong></p>

<p>Agora que o tiro está bem melhor, decidi adicionar mais objetos para o jogador atirar. Por enquanto ainda estou utilizando a mesma caixa do início do projeto, porém criei um spawn aleatório. No momento limitei para gerar 10 grupos contendo 4 caixas (2x2) ao redor da nave, em qualquer direção. Antes estava usando um grupo de 9 caixas (3x3) e o frame rate caia demais na explosão, e por ser apenas um teste não vale a pena perder tempo nisso agora, então reduzi para menos caixas (que depois vai ser um asteroide ou algum outro objeto no espaço).</p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/09/ff-shoot-2-1.jpg" alt="Final Frontier: Raycast, Spawn e MoSCoW"></p>

<p>O spawn de objetos é algo muito simples de fazer utilizando o design pattern <a href="http://gameprogrammingpatterns.com/prototype.html">Prototype</a>, principalmente na Unity onde o protótipo é um prefab. Utilizei o mesmo conceito em alguns jogos que fiz usando Unity em dois <a href="http://gamedeveloper.com.br/tag/ludum-dare/">Ludum Dare</a>, então copiei o código de lá e adicionei ao projeto. </p>

<p>Reaproveitar código de outros projetos, mesmo classes pequenas como esta que utilizei, ajudam a ganhar tempo por dois motivos: não perder tempo escrevendo o código e não perder tempo testando o código. É sempre bom ter alguns códigos prontos e, de preferência, escritos para serem reaproveitados em diferentes projetos. Algo ainda mais sofisticado seria criar módulos ou plugins (no caso da Unity), muitas empresas fazem isto para reaproveitar códigos que podem estar em qualquer projeto. Por isso, sempre é bom seguir o princípio <a href="http://gamedeveloper.com.br/mantenha-tudo-simples/">K.I.S.S.</a></p>

<p><strong>Método MoSCoW</strong></p>

<p>Antes de pensar em fazer um <a href="http://gamedeveloper.com.br/game-design-document/">GDD</a>, é legal listar algumas ideias do que será o jogo. Eu fiz uma longa lista de features que gostaria de colocar no jogo, isto não significa que estão na versão final mas serão testadas durante a fase de prototipagem. Esta lista, que podemos chamar de backlog, contém diversas tarefas que podem ser <a href="http://gamedeveloper.com.br/definicao-de-prioridade-de-tarefas/">divididas em partes menores</a>. É o mesmo conceito de definir as tarefas de uma sprint no <a href="http://gamedeveloper.com.br/aprenda-o-que-e-scrum/">Scrum</a>.</p>

<p>Mais tarde vou começar a criar o GDD na <a href="https://github.com/cicanci/game-unity-ff/wiki">Wiki do projeto no GitHub</a>, além de fazer um controle das tarefas utilizando <a href="https://trello.com/">Trello</a>. Mas, por enquanto, vou utilizar papel e caneta, e um método chamado <a href="https://en.wikipedia.org/wiki/MoSCoW_method">MoSCoW</a>. Este método consiste em classificar as features ou tarefas em 4 tipos:</p>

<ul>
<li>Must have: importante e obrigatório</li>
<li>Should have: importante, mas não necessário</li>
<li>Could have: desejável, mas não importante</li>
<li>Won't have: importante NÃO ter</li>
</ul>

<p>Isto é algo bem simples que ajuda a organizar a prioridade de tarefas, mas sem burocracias ou dependência de uma ferramenta específica. Apenas anote os itens em casa uma das classificações e pronto, ai está sua lista de tarefas organizada. A ideia do "Won't have" é que não se deve perder tempo com as tarefas nesta classificação. Um exemplo disso seriam tarefas relacionadas a melhorias e polimentos não necessários em um protótipo.</p>

<p>Abaixo está a lista que montei para esta primeira parte do projeto desde seu início, e o número #01 indica que é a primeira lista. "Nice to have" e "Good to have" equivalem a "Should have" e "Could have", respectivamente, e não tem o "Won't have". Aprendi a separar as tarefas desta maneira com um produtor quando trabalhava na EA, sem saber que isto se chamava MoSCoW (e que tinha o Won't have).</p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/09/ff-tasks-01.jpg" alt="Final Frontier: Raycast, Spawn e MoSCoW"></p>

<p>No verso desta folha adicionei uma lista chamada "Backlog" para listar ideias que tive durante o desenvolvimento das tarefas, assim posso planejar a próxima lista considerando estas ideas como possíveis tarefas. </p>

<p><strong>Próximos Passos</strong></p>

<p>Agora que o tiro está bem melhor, e com uma mira para auxiliar sua direção, o próximo passo vai ser melhorar um pouco o movimento da nave, pois ela está saindo da tela com frequência e ficando em uma posição errada quando volta. É um detalhe que precisa ser arrumado antes de começar a pensar em adicionar features como inimigos ao protótipo. Outra coisa que quero fazer é uma interação com o planeja que está no cenário, fazendo aparecer um tela quando o jogador se aproximar do planeja e exibindo algumas ações disponíveis.</p>

<p>O andamento do projeto pode ser conferido no <a href="https://github.com/cicanci/game-unity-ff">GitHub</a> e neste <a href="https://github.com/cicanci/game-unity-ff/tree/bfd1d40aead023b34f4d908fbe034eb25101c532">link</a> você pode ver as alterações no projeto até este post. Todos os posts desta série sobre meu projeto podem ser vistos na tag <a href="http://gamedeveloper.com.br/tag/final-frontier/">Final Frontier</a>, e como sempre qualquer sugestão ou opinião é bem vinda!</p>]]></content:encoded></item><item><title><![CDATA[Minha participação no Ludum Dare #36]]></title><description><![CDATA[<p>Pela quinta vez consecutiva participei do <a href="http://ludumdare.com/compo/ludum-dare-36/?action=preview&amp;uid=52021">Ludum Dare</a> na competição de fazer um jogo sozinho em 48 horas. Desta vez o tema era Ancient Technology (tecnologia antiga) e depois de descartar ideias relacionadas ao Egito e Idade da Pedra (que eram meio obvias para o tema), acabei lembrando de um</p>]]></description><link>http://gamedeveloper.com.br/ludum-dare-36/</link><guid isPermaLink="false">1c376776-d268-4bb2-9b67-16342b15b25a</guid><category><![CDATA[meus projetos]]></category><category><![CDATA[ludum dare]]></category><dc:creator><![CDATA[Bruno Cicanci]]></dc:creator><pubDate>Tue, 30 Aug 2016 03:29:27 GMT</pubDate><media:content url="http://gamedeveloper.com.br/content/images/2016/08/sunstone-3.jpg" medium="image"/><content:encoded><![CDATA[<img src="http://gamedeveloper.com.br/content/images/2016/08/sunstone-3.jpg" alt="Minha participação no Ludum Dare #36"><p>Pela quinta vez consecutiva participei do <a href="http://ludumdare.com/compo/ludum-dare-36/?action=preview&amp;uid=52021">Ludum Dare</a> na competição de fazer um jogo sozinho em 48 horas. Desta vez o tema era Ancient Technology (tecnologia antiga) e depois de descartar ideias relacionadas ao Egito e Idade da Pedra (que eram meio obvias para o tema), acabei lembrando de um episódio da série <a href="http://www.imdb.com/title/tt2306299/">Vikings</a> onde eles usavam uma pedra para achar o sol em dias nublados, e meu jogo foi baseado nisso.</p>

<p>Antes de iniciar fiz uma pequena pesquisa para a entender como esta pedra conhecida como <a href="https://en.wikipedia.org/wiki/Sunstone">Sunstone</a> era utilizada. Parece que não é certo que foram utilizadas historicamente, porém existem evidências que foram encontradas em navios naufragados e a região mais comum de encontrá-la é na Islândia, um lugar bem conhecido pelos Vikings. O video abaixo é um dos melhores que encontrei que explica um pouco sobre este assunto.</p>

<iframe width="640" height="360" src="https://www.youtube.com/embed/CXu8hozezOY" frameborder="0" allowfullscreen></iframe>

<p><strong>Game Design</strong></p>

<p>Desta vez foi a maior prioridade do meu projeto, pensar bem no game design do jogo. Depois de ficar duas horas pensando no tema e chegando na conclusão acima, fiquei mais umas 2 ou 3 horas pensando na jogabilidade. Pensei em bastante coisa para este jogo, e achei que daria para fazer tudo, mas infelizmente não deu para fazer tudo.</p>

<p>A mecânica base do jogo é você encontrar o sol movendo a Sunstone pela tela. Quando os dois pontos ficam pretos na mesma intensidade (conforme imagem abaixo), lá é onde o sol está. Além desta informação o jogo fala a posição do sol: nascendo ou se pondo. Com estas duas informações é possível encontrar a direção em que você está navegando, e é assim que se acredita que Vikings navegaram antes da invenção do compasso.</p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/08/sunstone-2.jpg" alt="Minha participação no Ludum Dare #36"></p>

<p>O jogo te dá um objetivo: ir para uma direção e uma determinada distancia do centro do mapa, que é a posição inicial do jogo. Para tornar o jogo simples eu assumi que o sol sempre nasce no LESTE e sempre se poem no OESTE. Assim, é possível saber exatamente onde fica a direção do objetivo e chegar na ilha para entregar as encomendas, ganhar 10 pontos e receber uma nova missão. Além disso, o jogador ganha um upgrade do navio, que pode ser aumentar a velocidade em 10 ou aumentar a pontuação em 1.</p>

<p>Infelizmente levei boa parte dos dois dias para programar esta mecânica e fazer a arte necessária, então o resto do jogo saiu bem diferente do que planejei. A ideia inicial era que o jogador poderia escolher qual missão queria, sendo que elas iriam variar entre perto, médio e longe, e a distancia e recompensa seriam diferentes para cada uma. Também pensei em um upgrade de carga que faria o jogador poder aceitar entregas maiores. </p>

<p>O jogo terminaria em 7 dias de trabalho, sendo que cada dia o jogador teria 12 horas para fazer as missões, que consumiriam as horas de acordo com a distância navegada. No fim, não foi possível fazer nada disso e implementei uma pontuação simples onde o jogador tem 5 minutes (300 segundos) para fazer o máximo de pontos até o tempo acabar. </p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/08/sunstone-4.jpg" alt="Minha participação no Ludum Dare #36"></p>

<p><strong>Programação</strong></p>

<p>Repeti o mesmo erro consciente de usar uma engine/framework que não uso há um tempo ou que é novo para mim. No <a href="http://gamedeveloper.com.br/ludum-dare-35/">Ludum Dare anterior</a> utilizei a Defold, que era nova pra mim. Desta vez utilizei uma velha conhecida, porém que não usava há alguns anos, a <a href="http://www.cocos2d-x.org/">Cocos2d-x</a>. </p>

<p>Atualmente a Cocos2d-x está na versão 3.12, e na última vez que utilizei estava na versão 2.X. Muita coisa mudou, muita mesmo, desde nome de classes até a maneira de utilizar algumas coisas. Na época nem tinha suporte ao C++11 e hoje está presente em praticamente tudo neste framework. Acabei não tendo tempo de me atualizar, então comecei a utilizar a versão mais nova da Cocos2d-x mais ou menos do jeito que eu lembrava, e sempre que esbarrava em algo consultava a documentação online (que hoje está muito boa e completa).</p>

<p>Desta vez decidi que o foco do meu jogo seria mobile, então desenvolvi no Mac OS X usando Xcode, sempre testando no emulador e em um aparelho Android. A Cocos2d-x está muito melhor hoje, e é bem simples compilar e testar outras plataformas sem precisar abrir outra IDE ou tools utilizando a linha de comando. Devido essa facilidade, era bem rápido testar. Eu desenvolvia no Xcode e testava no emulado, mas quando necessário rodava um simples comando para fazer o deploy e testar em um aparelho Android. Depois da compilação inicial que demora alguns minutos fica bem rápido, compilando apenas as alterações no código. </p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/08/sunstone-1.jpg" alt="Minha participação no Ludum Dare #36"></p>

<p>Nos últimos anos trabalhei muito com Unity, usando C#, e com HTML5, usando Javascript, e estava sentido falta de programar em C++. Praticamente desde a EA fechou em 2013 eu não programava em C++, e é uma sensação incrível pra mim. Vou tentar utilizar C++ com mais frequência, e também me atualizar com o C++11. </p>

<p>Este foi o primeiro Ludum Dare que utilizei um framework para fazer o jogo, sendo que nos quatro anteriores utilizei três vezes a Unity e uma vez a Defold, ambas game engines. Desenvolver um jogo sem algumas facilidades visuais que uma game engine tem dá mais trabalho, mas mesmo assim não me arrependo de ter utilizado a Cocos2d-x. Mas me arrependo de não ter utilizado algumas tools externas como <a href="https://www.codeandweb.com/texturepacker">TexturePacker</a> e <a href="http://www.mapeditor.org/">Tiled</a> para me ajudar no desenvolvimento. </p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/08/sunstone-3-1.jpg" alt="Minha participação no Ludum Dare #36"></p>

<p><strong>Arte</strong></p>

<p>Não fiquei tão feliz com a arte como na <a href="http://gamedeveloper.com.br/ludum-dare-35/">minha participação anterior</a>, mas mesmo assim foi muito melhor do que minhas demais participações. Mesmo sendo uma arte simples, fique feliz com o meu barco e a ilha. As nuvens foram um detalhe legal, e se você reparar elas se movem lentamente pela tela, sem tampar o campo de visão no centro da tela. Minha Sunstone ficou aceitável, porém não fazia ideia de como representá-la e esta foi minha melhor arte.</p>

<p>Infelizmente não consegui fazer música e efeitos sonoros. Esta foi a primeira vez que não coloquei nem efeitos sonoros, e a segunda vez que não coloquei música em um jogo no Ludum Dare. Acabei deixando para depois e não sobrou tempo, sendo que fiz a mecânica de pontuação na última meia hora antes das 48 horas acabarem.</p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/08/sunstone-5.jpg" alt="Minha participação no Ludum Dare #36"></p>

<p><strong>Conclusão</strong></p>

<p>Na minha última participação fique feliz com a programação e a arte, mas deixei o game design de lado. Desta vez foquei tanto no game design que pensei em um jogo grande demais para eu fazer em 48 horas, e isso acabou afetando a arte (ficou simples e sem som) e a programação (nas últimas horas a qualidade do código ficou bem ruim). Não fiquei feliz com o resultado, mas ainda assim fiquei feliz em ter participado e pelas lições que aprendi desta vez.</p>

<p>Esta foi a primeira vez que não fiz uma build para Web, e sinceramente isto não fez falta. O jogo está funcionando bem em aparelhos Android, iOS (infelizmente não tem como colocar uma build para download, mas da pra compilar o projeto e testar), Mac e Windows (se você não viu esta build lá é por que ainda não atualizei, preciso compilar em um Windows). </p>

<p>Ainda não encontrei um equilíbrio bom entre Arte, Programação e Game Design, mas acredito que estou chegando perto de saber a dose certa de atenção que devo ter em cada área para fazer um jogo completo em 48 horas. Desta vez tive praticamente as 48 horas livres, dormi bastante de sexta pra sábado e pouco de sábado para domingo. No fim não foi um grande problema, pois mesmo com 48 horas sem dormir o jogo ainda estaria grade demais para eu fazer em 48 horas do jeito que imaginei. </p>

<p>O código do jogo está disponível no <a href="https://github.com/cicanci/game-cocos2dx-ld36">GitHub</a> e na <a href="http://ludumdare.com/compo/ludum-dare-36/?action=preview&amp;uid=52021">página do jogo no Ludum Dare</a> existem mais informações sobre como baixar e jogar. O próximo Ludum Dare será em dezembro e já estou bem ansioso! Talvez eu tente novamente utilizando C++, porém ainda estou em dúvida se utilizo Unreal Engine ou chuto o balde e tento fazer algo no Linux (já trabalhei usando Ubuntu e Debian para programar backend, mas nunca um jogo). Talvez eu mude de ideia até lá e utilize algo diferente, ou algo que já usei. Na verdade não sei ainda, mas já estou ansioso para a próxima vez. </p>]]></content:encoded></item><item><title><![CDATA[Esta semana começa o Ludum Dare #36]]></title><description><![CDATA[<p>Sexta-feira às 22h (horário de Brasilia) começa o <a href="http://ludumdare.com/compo/">Ludum Dare #36</a>, e será minha <a href="http://gamedeveloper.com.br/tag/ludum-dare/">quinta participação</a> nesta game jam.</p>

<p>Semana passada realizei uma palestra na USP sobre game jams e dei muitas dicas importantes para participar deste tipo de competição, principalmente no Ludum Dare que tempo mais experiência. Confira os</p>]]></description><link>http://gamedeveloper.com.br/esta-semana-comeca-o-ludum-dare-36/</link><guid isPermaLink="false">58fc0b5d-bdb6-451c-8d00-0ff83ab3e704</guid><category><![CDATA[game dev]]></category><dc:creator><![CDATA[Bruno Cicanci]]></dc:creator><pubDate>Tue, 23 Aug 2016 14:22:57 GMT</pubDate><media:content url="http://gamedeveloper.com.br/content/images/2016/08/LD2009-HighresNoShadow.jpg" medium="image"/><content:encoded><![CDATA[<img src="http://gamedeveloper.com.br/content/images/2016/08/LD2009-HighresNoShadow.jpg" alt="Esta semana começa o Ludum Dare #36"><p>Sexta-feira às 22h (horário de Brasilia) começa o <a href="http://ludumdare.com/compo/">Ludum Dare #36</a>, e será minha <a href="http://gamedeveloper.com.br/tag/ludum-dare/">quinta participação</a> nesta game jam.</p>

<p>Semana passada realizei uma palestra na USP sobre game jams e dei muitas dicas importantes para participar deste tipo de competição, principalmente no Ludum Dare que tempo mais experiência. Confira os slides da <a href="http://gamedeveloper.com.br/game-jams-como-fazer-um-jogo-em-48h/">apresentação aqui</a>, tem muito conteúdo útil se você também pretende participar.</p>

<p>Abaixo estão algumas coisas que vou fazer nesta edição do Ludum Dare, separando pelas que eu recomendo e as que eu não recomendo (a não se que tenha experiência).</p>

<h3 id="norecomendomasvoufazer">Não recomendo, mas vou fazer</h3>

<ul>
<li><p>Em 3 edições do Ludum Dare usei a <a href="http://unity3d.com">Unity</a>, e na última a <a href="http://www.defold.com">Defold</a> (que foi um grande desafio por não conhecer). Desta fez quero usar algo que conheço mas não uso há um bom tempo, a <a href="http://www.cocos2d-x.org">Cocos2d-x</a>, um framework para desenvolver jogos em C/C++.</p></li>
<li><p>Focar em game design. Na <a href="http://gamedeveloper.com.br/game-jams-como-fazer-um-jogo-em-48h/">minha apresentação</a> é possível ver o gráfico abaixo que mostra que a qualidade dos meus jogos aumentou, porém o game design diminuiu. Desta vez este será o principal foco.</p></li>
</ul>

<p><img src="http://gamedeveloper.com.br/content/images/2016/08/ludum-dare-chart.png" alt="Esta semana começa o Ludum Dare #36"></p>

<ul>
<li><p>Tentar fazer arte e som para o jogo. Na <a href="http://gamedeveloper.com.br/ludum-dare-35/">última edição</a> consegui fazer uma arte bem legal, vou tentar repetir o feito nesta.</p></li>
<li><p>Para aproveitar melhor o tempo vou tentar não dormir no primeiro ou no segundo dia. Sempre tento, mas acabo dormindo, vamos ver se desta vez consigo.</p></li>
<li><p>Sempre fiz os jogos do Ludum Dare pensando na plataforma Web, pois é mais fácil para colocar o jogo lá e testar. Desta vez quero que o foco seja mobile, então minha prioridade será Android.</p></li>
</ul>

<h3 id="dicasimportantes">Dicas importantes</h3>

<ul>
<li><p>Escolha a linguagem de programação, framework ou game engine antes de começar e tenha certeza de que tudo está atualizado para não perder tempo esperando downloads.</p></li>
<li><p>Vai ser necessário criar arte e som, então já se prepare antecipadamente para isso (mesmo que você ache que não vai dar tempo, se prepare pois vai que dá).</p></li>
<li><p>Se você tem dificuldade em se concentrar, não deixe a TV ligada e evite YouTube, tente ouvir trilha sonoras ou músicas que você gosta.</p></li>
<li><p>Parece bobo mas planeja como serão suas refeições, e tente não sair pra comer pois isso pode te custar um tempo precioso. </p></li>
<li><p>Planeje o que fazer em caso de falta de internet e/ou falta de energia elétrica, é sempre bom ter um plano B e um lugar pra ir (algo tipo Starbucks, por exemplo).</p></li>
</ul>

<p><strong>Links interessantes:</strong></p>

<p><a href="http://gamedeveloper.com.br/ludum-dare-32/">Minha participação no Ludum Dare #32</a></p>

<p><a href="http://gamedeveloper.com.br/ludum-dare-33/">Minha participação no Ludum Dare #33</a></p>

<p><a href="http://gamedeveloper.com.br/ludum-dare-34/">Minha participação no Ludum Dare #34</a></p>

<p><a href="http://gamedeveloper.com.br/ludum-dare-35/">Minha participação no Ludum Dare #35</a></p>]]></content:encoded></item><item><title><![CDATA[Game Jams - Como fazer um jogo em 48h]]></title><description><![CDATA[<p>Este foi o tema da minha palestra apresentada apresentada na <a href="https://www.facebook.com/SSIUSP/">6ª Semana de Sistemas de Informação da USP</a> hoje. Nesta palestra falei sobre game jams, dei dicas para aproveitar melhor o tempo de um game jam e focar no desenvolvimento do jogo, e contei como foram minhas participações no <a href="http://gamedeveloper.com.br/tag/ludum-dare/">Ludum</a></p>]]></description><link>http://gamedeveloper.com.br/game-jams-como-fazer-um-jogo-em-48h/</link><guid isPermaLink="false">749d4f62-9242-4dfc-aaba-3a85d732f8dc</guid><category><![CDATA[game dev]]></category><category><![CDATA[palestras]]></category><dc:creator><![CDATA[Bruno Cicanci]]></dc:creator><pubDate>Wed, 17 Aug 2016 11:00:00 GMT</pubDate><media:content url="http://gamedeveloper.com.br/content/images/2016/08/ssi-usp.jpg" medium="image"/><content:encoded><![CDATA[<img src="http://gamedeveloper.com.br/content/images/2016/08/ssi-usp.jpg" alt="Game Jams - Como fazer um jogo em 48h"><p>Este foi o tema da minha palestra apresentada apresentada na <a href="https://www.facebook.com/SSIUSP/">6ª Semana de Sistemas de Informação da USP</a> hoje. Nesta palestra falei sobre game jams, dei dicas para aproveitar melhor o tempo de um game jam e focar no desenvolvimento do jogo, e contei como foram minhas participações no <a href="http://gamedeveloper.com.br/tag/ludum-dare/">Ludum Dare</a>.</p>

<iframe src="//www.slideshare.net/slideshow/embed_code/key/yhHYLgAilZpK7" width="800" height="600" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> 

<p><img src="http://gamedeveloper.com.br/content/images/2016/08/bruno1.jpg" alt="Game Jams - Como fazer um jogo em 48h"></p>

<p>Muito obrigado ao pessoal da organização do evento pelo convite e parabéns pelo evento!</p>]]></content:encoded></item><item><title><![CDATA[Postmortem: Geometry World]]></title><description><![CDATA[<p>Eu sempre recebo e-mails pedindo para divulgar jogos, porém isto é algo que decidi desde o início do blog não fazer. Eu acho importante divulgar, mas fazer um post falando de um jogo não é o tipo de conteúdo que eu quero para o blog, por isso sempre respondo falando</p>]]></description><link>http://gamedeveloper.com.br/postmortem-geometry-world/</link><guid isPermaLink="false">f52cc162-4f8f-44ca-b3dd-f811d452b895</guid><category><![CDATA[game dev]]></category><category><![CDATA[postmortem]]></category><dc:creator><![CDATA[Bruno Cicanci]]></dc:creator><pubDate>Tue, 16 Aug 2016 14:41:00 GMT</pubDate><media:content url="http://gamedeveloper.com.br/content/images/2016/08/geometry-world-flyer-verso.jpg" medium="image"/><content:encoded><![CDATA[<img src="http://gamedeveloper.com.br/content/images/2016/08/geometry-world-flyer-verso.jpg" alt="Postmortem: Geometry World"><p>Eu sempre recebo e-mails pedindo para divulgar jogos, porém isto é algo que decidi desde o início do blog não fazer. Eu acho importante divulgar, mas fazer um post falando de um jogo não é o tipo de conteúdo que eu quero para o blog, por isso sempre respondo falando que não faço reviews ou divulgação de jogos, mas sempre ofereço uma oportunidade para divulgação do jogo através de um postmortem. Desta forma o desenvolver ganha sua divulgação, e os leitores deste blog ganham uma história sobre o desenvolvimento de um jogo.</p>

<p>Isto é importante por que é possível aprender muito apenas lendo o que outras pessoas fizeram e deu certo, e também o que deu errado. Já vi muita gente falando que aprendeu com os <a href="http://gamedeveloper.com.br/tag/postmortem/">postmortems publicados</a> aqui, por isso fico feliz em sempre ter este espaço para todo desenvolver que tem seu jogo publicado (esta é a única regra). Não importa se o texto é longo e detalhado, ou curto e objetivo, sempre podemos aprender a partir da experiência dos outros.</p>

<p>Desta vez vamos ver como foi o desenvolvimento do jogo <a href="https://itunes.apple.com/us/app/geometry-world/id1130806535?l=pt&amp;ls=1&amp;mt=8">Geometry World</a> do Eder Gabriel. Muito obrigado por enviar o texto abaixo e parabéns pelo jogo publicado!</p>

<hr>

<p><strong>Geometry World</strong></p>

<p>Olá! Sou o Eder, designer do Geometry World. Abaixo a descrição dele, compartilhando alguns pontos que percebi durante a criação do game.</p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/08/geometry-world-flyer-verso-1.jpg" alt="Postmortem: Geometry World"></p>

<p><strong>Descrição do game</strong></p>

<p>Geometry World é um puzzle em que o jogador tem como objetivo colocar a caixa em um determinado lugar do cenário. O jogo tem cinquenta níveis divididos em cinco mundos com características particulares, por exemplo, o segundo mundo tem as colunas deslizantes. <br>
Apenas posicionando a caixa na posição determinada, o jogador desbloqueia os primeiros quarenta níveis do jogo. O último mundo é desbloqueável  coletando as medalhas de conquista disponível de acordo com o objetivo dos 40 níveis anteriores.</p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/08/geometry-world-gameplay-w1.png" alt="Postmortem: Geometry World"></p>

<p>Para controlar a caixa, o jogador deve segurar na tela e direcioná-la para a direção em que ele queira. Os principais desafios são conseguir todas as conquistas dos cinquenta níveis e se acostumar com a física do jogo.</p>

<p>Por eu estar mais preocupado com os aspectos funcionais do jogo, criei o design dele mais minimalista para diminuir o tempo de criação do jogo. Essa foi uma dúvida que eu fiquei por um tempo, de como alinhar uma arte funcional para o game, sem gastar muito tempo. Um requisito meu nesse projeto foi o de não usar palavras nas ações do jogo, apenas ícones.</p>

<p>Conforme fui mostrando para os amigos mais próximos, reparei em alguns pontos que não ficaram claros o suficiente e provavelmente, eu crie em novas formas de apresentar isso nas futuras versões. Esses mesmos testes também me fizeram a dar um maior valor a como ensinar as pessoas a jogar nas telas iniciais.</p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/08/geometry-world-gameplay-w3.png" alt="Postmortem: Geometry World"></p>

<p><strong>Pontos Negativos</strong></p>

<p>Tive um atraso para concluir o game porque num teste com o iPod Touch, alguns cenários não estavam com a resolução ideal, porque o jogador não conseguia fazer o movimento correto para alcançar um determinado lugar.</p>

<p>Por se tratar de um jogo mais longo, pude aplicar alguns conceitos de level design. Mas sempre tem alguns pontos que ficam pendentes, por eu não ter ninguém para testar e discutir quando eu estava definindo como seriam os níveis.</p>

<p>Tem um erro que não descobri o que faz com que ele não reconheça a posição do jogador quando ele posiciona no lugar correto. Ele é bem inconstante, nas próximas versões, vou ter que inventar uma outra forma de validação, porque quando é reiniciado o app e concluindo a mesma fase, o erro desaparece.</p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/08/geometry-world-menu-w3.png" alt="Postmortem: Geometry World"></p>

<p>Uma outra dificuldade foi colocar e testar o aplicativo na AppStore, por ser bem rígido o controle deles são necessários diversos certificados no iMac e no iTunes Connect que fui descobrindo e sempre acabava atrasando a publicação.</p>

<p>Tenho pesquisado algumas formas de propaganda, mas o mais difícil é convencer alguém que não me conhece a pagar pelo jogo e criei um flyer para divulgar por aí.</p>

<p><strong>Pontos Positivos</strong></p>

<p>Descobri o Corona SDK em uma pesquisa na faculdade, por ter uma curva de aprendizado menor em relação aos outros, acabei utilizando ele. Depois de alguns testes e a criação do meu primeiro game mobile, o Moving Kart, percebi que era possível criar algo mais complexo, que a comunidade do Corona é bem ativa e as minhas dúvidas sempre foram explicadas de algum jeito. Fiquei surpreso com o tamanho final do meu app para um jogo de 50 níveis (menos de 9MB).</p>

<p>Sempre tive o interesse em criar um aplicativo na AppStore para tentar deixar o meu portfolio mais interessante e consegui depois de 10 meses de produção e alguns meses que ficou congelado o projeto. </p>

<p>E o aprendizado que ganho com isso é enorme, principalmente, por ter que planejar todas as possibilidades do game, já que fiz sozinho, esse projeto me ajudou a ser mais analítico com qualquer sistema que eu crie no futuro.</p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/08/geometry-world-flyer-frente.jpg" alt="Postmortem: Geometry World"></p>

<p><strong>Links</strong></p>

<p><a href="https://itunes.apple.com/us/app/geometry-world/id1130806535?l=pt&amp;ls=1&amp;mt=8">Download pela App Store</a></p>

<p><a href="https://www.facebook.com/Geometryworld.game">Página no Facebook</a></p>]]></content:encoded></item><item><title><![CDATA[Melhores práticas para 2D na Unity - Parte 3]]></title><description><![CDATA[<p>Na <a href="http://gamedeveloper.com.br/melhores-praticas-2d-unity-parte-1">parte 1</a> falei sobre dicas para reduzir o tamanho das imagens e melhores resoluções para dispositivos móveis, e na <a href="http://gamedeveloper.com.br/melhores-praticas-2d-unity-parte-2">parte 2</a> o foco foi o plugin <a href="https://www.assetstore.unity3d.com/en/#!/content/2413">NGUI</a> (mas as dicas também se aplicam ao UI da Unity) e ao uso de sprite sheets. Desta vez o foco serão melhores</p>]]></description><link>http://gamedeveloper.com.br/melhores-praticas-2d-unity-parte-3/</link><guid isPermaLink="false">78e0e4a9-782a-4774-a630-defc828b22cc</guid><category><![CDATA[game dev]]></category><dc:creator><![CDATA[Bruno Cicanci]]></dc:creator><pubDate>Thu, 11 Aug 2016 02:19:47 GMT</pubDate><media:content url="http://gamedeveloper.com.br/content/images/2016/08/unity3d1.jpg" medium="image"/><content:encoded><![CDATA[<img src="http://gamedeveloper.com.br/content/images/2016/08/unity3d1.jpg" alt="Melhores práticas para 2D na Unity - Parte 3"><p>Na <a href="http://gamedeveloper.com.br/melhores-praticas-2d-unity-parte-1">parte 1</a> falei sobre dicas para reduzir o tamanho das imagens e melhores resoluções para dispositivos móveis, e na <a href="http://gamedeveloper.com.br/melhores-praticas-2d-unity-parte-2">parte 2</a> o foco foi o plugin <a href="https://www.assetstore.unity3d.com/en/#!/content/2413">NGUI</a> (mas as dicas também se aplicam ao UI da Unity) e ao uso de sprite sheets. Desta vez o foco serão melhores práticas de programação para jogos 2D na Unity.</p>

<p>Apesar de ter o foco em 2D, boa parte do conteúdo deste post abrange jogos em 3D na Unity também. No site da Unity existe uma categoria de <a href="http://unity3d.com/pt/learn/tutorials/topics/best-practices">Melhores Práticas</a> excelente, falando de física, assets e UI. </p>

<p><strong>O Update</strong></p>

<p>Quando criamos um novo script na Unity, por padrão os métodos <code>Start()</code> e <code>Update()</code> são adicionados ao código. O maior problema é não dar atenção a este detalhe, pois muitos programadores deixam estes métodos mesmo vazios no script, e isto pode fazer diferença no desempenho do jogo dependendo da quantidade de scripts sendo usados.</p>

<p>Internamente a Unity executa todos os <code>Update()</code> que encontra nos scripts ativos na cena do jogo, mesmo eles estando vazios. Este <a href="http://blogs.unity3d.com/2015/12/23/1k-update-calls">artigo</a> publicado no blog da Unity explica este problema em maiores detalhes. Se você não for utilizar o método, simplesmente remova do seu código. O <code>Start()</code> não faz muita diferença, mas o <code>Update()</code> pode reduzir o seu frame rate significativamente, principalmente em dispositivos móveis.</p>

<p>Imagens e sprite sheets de jogos 2D podem ocupar mais espaço em disco e memória do que modelos 3D com textura, o que pode exigir um processamento extra do hardware que pode ser adquirido seguindo boas práticas como esta mencionada acima.</p>

<p><strong>A Física</strong></p>

<p>A Unity possui uma versão 2D para praticamente todo componente disponível no 3D, e mesmo sendo otimizado pode exigir bastante processamento do hardware se existirem muitos objetos na cena. Se eu não me engano, mesmo que o objeto não esteja sendo desenhado na tela, sua física continua ativa para verificações de colisão fora da tela. Se no seu jogo existem muitos objetos colidindo ao mesmo tempo em uma cena podemos desabilitar a física (ou mesmo o objeto inteiro) quando ele estiver fora da tela.</p>

<p>Por exemplo, em um jogo de estratégia como StarCraft podemos "ligar" a física dos objetos quando as unidades do jogador estiverem em uma área próxima das unidades do imigo. Para evitar verificações em cada update (e poder ter o problema do tópico anterior), você pode deixar a física habilitada no líder do grupo, e fazer ele habilitar a física nos depois com um callback quando chegar na área do inimigo. É apenas uma ideia, provavelmente existe maneiras ainda melhores pra isso, mas o ponto é que muitos objetos com física ativada podem causar problemas de desempenho. </p>

<p>A <a href="http://www.defold.com">Defold</a>, uma game engine desenvolvida pela King para jogos 2D, limita o número de objetos com colisão por nível. Tive este problema quando estava desenvolvendo o jogo <a href="http://gamejolt.com/games/metaforce/141821">Metaforce</a> para o <a href="http://gamedeveloper.com.br/ludum-dare-35/">Ludum Dare #35</a>, montei o mapa inteiro com colisão para o personagem não atravessar as paredes, mas o limite da engine (que eu não sabia) me fez mudar a maneira de verificar a colisão com o cenário.</p>

<p><strong>O Loading</strong></p>

<p>Isto depende muito do jogo, mas geralmente temos duas maneiras de carregar as imagens do cenário: tudo de uma vez ou aos poucos. A vantagem de carregar tudo de uma vez é que o jogo flui sem a necessidade de fazer o load de imagens do disco para a memória durante o jogo, mas a desvantagem é que em alguns hardwares isto pode fazer o jogo usar toda memória disponível e quebrar, ou pode ser que o loading seja muito longo em aparelhos com hardware fraco.</p>

<p>Carregar aos poucos, ou <a href="https://en.wikipedia.org/wiki/Lazy_loading">Lazy Loading</a> como é conhecido, é você carregar as imagens apenas quando for necessário. Por exemplo, você não precisa carregar a arte do chefão sem saber se o jogador vai chegar no final da fase para enfrentá-lo, ou carregar todas as imagens de achievements do jogo, mesmo sendo difícil de conseguir todos na mesma fase. A vantagem disso é que você usa apenas a memória necessária para carregar as imagens que precisa no momento, e assim o loading inicial fica mais rápido e com um risco menor de quebrar o jogo em aparelhos com hardware fraco. A desvantagem é que você vai precisar escrever o código para gerenciar o loading de recursos do jogo para que sejam carregados apenas quando necessários.</p>

<p>Ah, e não se esqueça de ter uma tela de loading ou um feedback para que o jogar saiba o que está acontecendo. Isto é mais Game Design do que Programação, mas vale a pena sempre pensar neste detalhes durante o desenvolvimento.</p>

<p>Esta foi a terceira e última parte sobre melhores práticas para fazer um jogo em 2D na Unity. A ideia inicial era ter publicar estes posts em sequencia, porém demorei mais de 1 ano para publicá-los. Se você quiser saber mais sobre desenvolvimento de jogos com Unity acompanhe o desenvolvimento do meu jogo <a href="http://gamedeveloper.com.br/tag/final-frontier/">Final Frontier</a>, estou escrevendo um post sobre o progresso do jogo a cada 2 semanas. </p>]]></content:encoded></item><item><title><![CDATA[Final Frontier: Câmera e controle]]></title><description><![CDATA[<p>No último <a href="http://gamedeveloper.com.br/final-frontier-skybox-e-mais-destruicao/">post</a> deste série sobre o desenvolvimento do meu jogo <a href="http://gamedeveloper.com.br/tag/final-frontier/">Final Frontier</a> falei sobre o novo skybox e melhorei a destruição da caixa que representa um asteroide. Desta vez trabalhei em melhorias para a câmera e o controle da nave, além de alterar novamente o skybox e adicionar um</p>]]></description><link>http://gamedeveloper.com.br/final-frontier-camera-e-controle/</link><guid isPermaLink="false">1b731dcd-9fa5-4f31-b55f-7356d55444bd</guid><category><![CDATA[final frontier]]></category><dc:creator><![CDATA[Bruno Cicanci]]></dc:creator><pubDate>Wed, 03 Aug 2016 15:36:40 GMT</pubDate><media:content url="http://gamedeveloper.com.br/content/images/2016/08/capa-ff-camera-big.jpg" medium="image"/><content:encoded><![CDATA[<img src="http://gamedeveloper.com.br/content/images/2016/08/capa-ff-camera-big.jpg" alt="Final Frontier: Câmera e controle"><p>No último <a href="http://gamedeveloper.com.br/final-frontier-skybox-e-mais-destruicao/">post</a> deste série sobre o desenvolvimento do meu jogo <a href="http://gamedeveloper.com.br/tag/final-frontier/">Final Frontier</a> falei sobre o novo skybox e melhorei a destruição da caixa que representa um asteroide. Desta vez trabalhei em melhorias para a câmera e o controle da nave, além de alterar novamente o skybox e adicionar um planeta.</p>

<p><strong>Um planeta na galáxia</strong></p>

<p>Um skybox adiciona detalhes incríveis ao jogo, e muitas vezes o jogador não repara na arte que está acima de suas cabeças. O mapa da Lua no jogo <a href="https://www.destinythegame.com/">Destiny</a> tem um skybox incrível, com a Terra e a ISS destruída em destaque no céu. </p>

<p>Eu decidi mudar o skybox para outra opção do mesmo asset pack, desta vez com uma névoa verde que adiciona mais detalhes. Também adicionei um novo asset pack gratuito chamado <a href="https://www.assetstore.unity3d.com/en/#!/content/38913">Vast Outer Space</a>, que contém modelos de planetas, asteroides e algumas partículas. Adicionei o planeta abaixo, ele parece próximo mas está bem longe e aumentei o modelo 1000 vezes. Também alterei o <code>Clipping Planes</code> da câmera, aumentando o <code>Far</code> para 10000, assim o planeta aparece ao fundo mesmo estando bem longe. </p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/08/planeta-novo.jpg" alt="Final Frontier: Câmera e controle"></p>

<p><strong>Pilotando a nave</strong></p>

<p>Até então o controle da nave era algo temporário, até mesmo para um quase protótipo. Decidi pesquisar como eu gostaria que o controle da minha nave fosse, e usei como referência alguns jogos que gostava de jogar no Nintendo 64 e Playstation 2. Estava em dúvida entre: <a href="https://www.youtube.com/watch?v=GhQp8le67Xo">Star Fox 64</a>, onde a a câmera fica fixa seguindo a nave; <a href="https://www.youtube.com/watch?v=V0zjmj4rf3U">Star Wars Rogue Squadron</a>, onde o jogador tem mais liberdade porém com variação de zoom na nave; Star Wars Starfighter (video abaixo), onde encontrei a melhor referência para o que eu quero fazer no Final Frontier.</p>

<iframe width="640" height="360" src="https://www.youtube.com/embed/fv4e_vvwY6c" frameborder="0" allowfullscreen></iframe>

<p>Eu poderia modificar o código que fiz para a movimentação da nave, adicionando ainda mais linhas de código, mas decidi pesquisar outras maneiras de controlar a nave. Mesmo sendo um código temporário, muitas linhas de código podem dificultar implementar novas features, portanto decidi melhorar esta parte do código. Usei como referência o video abaixo, que ensina a fazer um jogo simples de pilotar aviões.</p>

<iframe width="640" height="360" src="https://www.youtube.com/embed/lCulq9J0Y9E" frameborder="0" allowfullscreen></iframe>

<p>O resultado final, que foi uma mistura do que eu tinha feito com novas coisas do video acima, ficou bem melhor do que eu esperava. Além dos direcionais do teclado agora também é possível controlar usando um controle conectado ao computador, testei com o Xbox 360 Controller for Windows e o Steam Controller. Para deixar o tiro mais simples e reduzir uma verificação no código adicionei o botão <code>space</code> como um trigger para o botão <code>Fire1</code> no <code>Input Manager</code> (Edit > Project Settings > Input).</p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/08/input-manager.jpg" alt="Final Frontier: Câmera e controle"></p>

<p><strong>Câmera</strong></p>

<p>Na versão anterior do controle da nave a câmera estava dentro do prefab da nave, o que dava a impressão de uma câmera dura seguindo a nave. Como alterei o controle, foi natural também adaptar a câmera para esta nova situação. Decidi tentar usar o <a href="https://docs.unity3d.com/ScriptReference/Transform.LookAt.html">LookAt</a> como é mostrado no video acima, mas não funcionou muito bem no meu caso, pois quando a nave dava um loop a câmera girava e ficava de cabeça para baixo.</p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/08/nave-erro-camera.jpg" alt="Final Frontier: Câmera e controle"></p>

<p>Meu erro foi assumir que tudo do video acima funcionaria no meu caso, porém a câmera tem um comportamento diferente, então removi o <code>LookAt</code> e fiz a rotação da câmera ser a mesma da nave, o que ficou exatamente como eu queria. Ajustei a distância da câmera adicionando um offset no script, assim ela ficou um pouco mais afastada, além de dar um efeito legal ao rodar o jogo (a nave sai de trás da câmera e vai para o local do offset).</p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/08/ff-camera.jpg" alt="Final Frontier: Câmera e controle"></p>

<p><strong>Próximos passos</strong></p>

<p>Agora que a movimentação da nave está melhor vou começar a trabalhar em uma mira na tela, para o jogador saber onde está atirando, e vou substituir a caixa branca por um modelo de asteroide. Provavelmente vou dar uma pesquisada em algum efeito de partícula para a nave e os tiros, substituindo as bolas brancas por algo que faça mais sentido ser atirado por uma nave no espaço.</p>

<p>O andamento do projeto pode ser conferido no <a href="https://github.com/cicanci/game-unity-ff">GitHub</a> e neste <a href="https://github.com/cicanci/game-unity-ff/tree/3e8ab71d0ae3410b50dac9e7873c48aa0e0e0b4a">link</a> você pode ver as alterações no projeto até este post. Todos os posts desta série sobre meu projeto podem ser vistos na tag <a href="http://gamedeveloper.com.br/tag/final-frontier/">Final Frontier</a>, e como sempre qualquer sugestão ou opinião é bem vinda!</p>]]></content:encoded></item><item><title><![CDATA[Incentivos financeiros para desenvolver jogos no Brasil]]></title><description><![CDATA[<p>Este post foi uma sugestão do leitor Felipe, que inclusive me enviou boa parte do conteúdo abaixo. Ser um desenvolvedor independente não é fácil, principalmente quando se tem pouco ou nenhum recurso para investir. </p>

<p>Até pouco tempo atrás a maneira mais comum para nós brasileiros conseguir investimento era ir atrás</p>]]></description><link>http://gamedeveloper.com.br/incentivos-financeiros-gamedev/</link><guid isPermaLink="false">87d551b1-6d9c-488e-8084-f384b3a8fe0d</guid><category><![CDATA[game dev]]></category><dc:creator><![CDATA[Bruno Cicanci]]></dc:creator><pubDate>Wed, 27 Jul 2016 14:42:00 GMT</pubDate><media:content url="http://gamedeveloper.com.br/content/images/2016/07/capa-investimento.jpg" medium="image"/><content:encoded><![CDATA[<img src="http://gamedeveloper.com.br/content/images/2016/07/capa-investimento.jpg" alt="Incentivos financeiros para desenvolver jogos no Brasil"><p>Este post foi uma sugestão do leitor Felipe, que inclusive me enviou boa parte do conteúdo abaixo. Ser um desenvolvedor independente não é fácil, principalmente quando se tem pouco ou nenhum recurso para investir. </p>

<p>Até pouco tempo atrás a maneira mais comum para nós brasileiros conseguir investimento era ir atrás de publishers de fora e apresentar um jogo quase pronto, nada de idéias ou protótipos inacabados. E mesmo sendo possível conseguir investidores fora do país, ainda assim era necessário tirar dinheiro do próprio bolso para construir o jogo antes de ser apresentado, além dos custos de viajar para eventos e apresentar o jogo. </p>

<p>Felizmente aos poucos isso tem mudado no Brasil, e agora temos algumas opções para ter o jogo financiado por programas do governo. Alguns estúdios brasileiros já se beneficiaram ou estão se beneficiando dos programados que vou comentar abaixo. Não sou especialista neste assunto, portanto o conteúdo abaixo foi escrito baseado nos links que recebi e mais o que pesquisei. A ideia deste post é mostrar as alternativas que temos no Brasil, e não entrar em discussões políticas.</p>

<p><strong>Lei Roanet</strong></p>

<p>Acredito que o primeiro programa do governo que passou a aceitar jogos foi a <a href="http://www.planalto.gov.br/ccivil_03/leis/L8313cons.htm">Lei Roanet</a> do Ministério da Cultura, que depois de muito custo começou a ver jogos como uma expressão artística e não como um brinquedo ou jogo de azar. O jogo <a href="http://toren-game.com/">Toren</a>, da Swordtales, conseguiu investimento através desta lei e foi <a href="http://br.ign.com/brasil/3789/interview/superproducao-brasileira-game-toren-e-lancado-apos-quatro-an">lançado ano passado</a> para PC e PS4. O vídeo abaixo explica como funciona este programa.</p>

<iframe width="640" height="360" src="https://www.youtube.com/embed/7S8dAS9w-bk" frameborder="0" allowfullscreen></iframe>

<p><strong>Editais da Prefeitura de São Paulo</strong></p>

<p>A prefeitura de São Paulo tem <a href="https://spcine.wordpress.com/editais/investimento/">editais</a> voltado para investimento em produções audiovisuais, e jogos são aceitos. <a href="http://www.mynightjobgame.com/">My Night Job</a>, da Webcore Games, foi lançado este ano com <a href="http://overloadr.com.br/noticias/2015/08/contemplado-em-edital-da-prefeitura-de-sao-paulo-my-night-job-sera-lancado-para-ps4/">investimento obtido</a> através de um edital. <a href="http://www.pocket-trap.com/clash-of-carrots.html">Ninjin: Clash of Carrots</a>, da Pocket Trap, também <a href="http://overloadr.com.br/especiais/reportagens/2014/09/os-paulistas-da-pocket-trap-e-realizacao-de-um-sonho-levar-ninjin-2-tgs/">conseguiu investimento</a> pelo edital da prefeitura. </p>

<p>Após o <a href="https://spcine.wordpress.com/2016/06/27/big-festival-traz-games-de-48-paises-ao-ccsp/">Big Festival</a>, o edital <a href="https://spcine.wordpress.com/2016/07/01/games-animacao-spcine-investe-em-conteudo-transmidia/">Batalha Animada</a> foi aberto e conta com R$100 mil para o desenvolvimento de games para dispositivos móveis. Mais R$100 mil são oferecidos por uma <a href="https://spcine.wordpress.com/2016/07/07/parceria-com-canada-investe-em-tv-game-web-e-vr/">parceria com o Canadá</a>. É claro que não é fácil conseguir o investimento através de um edital, mas existem algumas opções e vale a pena ficar de olho no site da <a href="https://spcine.wordpress.com">Spcine</a>.</p>

<p><strong>INOVApps</strong></p>

<p>O <a href="http://www.mc.gov.br/concurso-inovapps">INOVApps</a> é um concurso do Ministério das Comunicações que tem como objetivo apoiar o desenvolvimento de aplicativos para dispositivos móveis. É um pouco difícil encaixar um jogo neste concurso, pois ele requer que o projeto se encaixe em algumas categorias específicas, e a mais segura para jogos é Educação/Ensino. Não é um concurso difícil de participar e ganhar, pois não há apenas um projeto selecionado, mas precisa ter um bom material para ser submetido e se adequar ao edital do concurso.</p>

<p>Parece que alguns jogos que ganharam este concurso ano passado tiveram seu financiamento suspenso devido a uma decisão judicial, mas este é o <a href="http://dropsdejogos.com.br/index.php/noticias/indie/item/1567-exclusivo-concurso-inovapps-e-alvo-de-decisao-judicial-e-suspende-pagamentos-a-desenvolvedores">único link</a> sobre o assunto.</p>

<p><strong>BNDES</strong></p>

<p>A <a href="http://www.aquiris.com.br/">Aquiris</a>, desenvolvedora do <a href="http://www.horizonchase.com/">Horizon Chase</a> que venceu o prêmio de <a href="http://br.ign.com/big-festival/30286/feature/horizon-chase-vence-premio-de-melhor-jogo-do-big-festival-20">melhor jogo</a> no Big Festival, foi a primeira empresa brasileira do setor de games a conseguir investimento do BNDES. Foram <a href="http://www.bndes.gov.br/SiteBNDES/bndes/bndes_pt/Institucional/Sala_de_Imprensa/Noticias/2016/Cultura/20160701_games.html">R$ 1,5 milhão financiados</a> para o plano de negócios da empresa. Eu acredito que este deve ser o financiamento mais difícil de conseguir, mas também é o que deve investir o maior valor em uma empresa.</p>

<p><strong>Outras formas de investimento</strong></p>

<p>Apesar de ser um concurso, o <a href="http://principal.bigfestival.com.br/2016/">Big Festival</a> possui um bom prêmio para os vencedores e, o que é mais importante na minha opinião, visibilidade internacional. Os vencedores saíram em portais de games no Brasil e no exterior, o que pode ajudar bastante a divulgar o jogo e talvez abrir novos investimentos para a empresa.</p>

<p>Não tenho certeza, mas acho que para a maioria dos programas acima é necessário ter uma empresa aberta, por isso concursos são uma boa forma de conseguir dinheiro para investir em projetos.</p>

<p>Se você conheço outros incentivos financeiros para desenvolver jogos no Brasil deixe um comentário abaixo que eu adiciono nesta lista.</p>

<p>Imagem da capa: <a href="http://www.shutterstock.com/pic-337122470/stock-photo-young-man-using-a-laptop-building-online-business-making-dollar-bills-cash-falling-down-beginner.html?src=C-RF706VSch304ZcEvhH4A-1-6">Young man using a laptop</a> do Shutterstock.</p>]]></content:encoded></item><item><title><![CDATA[Final Frontier: Skybox e mais destruição]]></title><description><![CDATA[<p>No <a href="http://gamedeveloper.com.br/final-frontier-playground-e-destruicao/">post anterior</a> sobre o meu projeto Final Frontier eu escrevi sobre como estava utilizando o playground para testar o gameplay e como fiz um modelo 3D feito no Blender ser destruído na Unity. Nest post vou falar sobre skybox e algumas melhorias que fiz para a destruição ser maior,</p>]]></description><link>http://gamedeveloper.com.br/final-frontier-skybox-e-mais-destruicao/</link><guid isPermaLink="false">f240357d-be53-41a9-ab5a-0ad23b9f4a65</guid><category><![CDATA[final frontier]]></category><dc:creator><![CDATA[Bruno Cicanci]]></dc:creator><pubDate>Wed, 20 Jul 2016 03:01:00 GMT</pubDate><media:content url="http://gamedeveloper.com.br/content/images/2016/07/ff-capa-3.jpg" medium="image"/><content:encoded><![CDATA[<img src="http://gamedeveloper.com.br/content/images/2016/07/ff-capa-3.jpg" alt="Final Frontier: Skybox e mais destruição"><p>No <a href="http://gamedeveloper.com.br/final-frontier-playground-e-destruicao/">post anterior</a> sobre o meu projeto Final Frontier eu escrevi sobre como estava utilizando o playground para testar o gameplay e como fiz um modelo 3D feito no Blender ser destruído na Unity. Nest post vou falar sobre skybox e algumas melhorias que fiz para a destruição ser maior, além de outros detalhes sobre a organização do projeto na Unity.</p>

<p><strong>Ao infinito e além</strong></p>

<p><a href="https://en.wikipedia.org/wiki/Skybox_(video_games)">Skybox</a> é o nome da textura que fica no "fundo" do cenário renderizado pela câmera principal. O skybox padrão da Unity é um céu azul e um "chão" marrom no horizonte e, além de eu achar feio, este skybox padrão não combinava com meu jogo. Então, fui na <a href="https://www.assetstore.unity3d.com/">Asset Store</a> procurar uma opção gratuita e que fizesse mais sentido e foi então que encontrei o incrível <a href="https://www.assetstore.unity3d.com/en/#!/content/3392">Skybox Volume 2 (Nebula)</a>!</p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/07/ff-skybox-1.jpg" alt="Final Frontier: Skybox e mais destruição"></p>

<p>Esta coleção de skyboxes possui 7 opções diferentes, todas bem interessantes e muito bem detalhadas. Por enquanto vou utilizar o Stars01 (imagem acima), mas vou colocar alguns exemplos abaixo de outras opções que eu gostei. Apesar de todas opções serem bem legais é bom manter no projeto apenas as que serão utilizadas por que esta coleção tem 80MB. Por enquanto vou deixar todas, mas ao longo do projeto provavelmente vou remover as que não irei utilizar. Existem outros assets no diretório <code>Standard Assets</code> que não estou usando e logo vou remover do projeto também.</p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/07/ff-skybox-2.jpg" alt="Final Frontier: Skybox e mais destruição"></p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/07/ff-skybox-3.jpg" alt="Final Frontier: Skybox e mais destruição"></p>

<p><strong>Adicionando mais destruição</strong></p>

<p>No post anterior eu tinha colocado apenas uma caixa que, quando o tiro colide com ela, o modelo 3D é substituído pela versão "destruída" e a física é aplicada nela para que os pedaços voem pelo ar. Desta vez decidi fazer uma parede de caixas que explode as demais quando os destroços de uma voarem após a colisão com o tiro, e o resultado fica conforme a sequencia abaixo.</p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/07/ff-antes-explosao.jpg" alt="Final Frontier: Skybox e mais destruição"></p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/07/ff-explosao.jpg" alt="Final Frontier: Skybox e mais destruição"></p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/07/ff-capa-3.jpg" alt="Final Frontier: Skybox e mais destruição"></p>

<p>Muitos modelos 3D voando pelo cenário com física para colisão podem fazer o jogo ficar pesado. Não é o caso para o meu jogo ainda, mas quando mais objetos estiverem no cenário, mais modelos serão desenhados na tela, o que pode ser um problema para alguns aparelhos com hardware limitado. É muito cedo para se preocupar em otimizar isso, pois ainda nem sei como o jogo será, mas fiz algumas alterações para minimizar este problema. </p>

<p>O modelo do tiro e dos da caixa destruída são removidos da cena pelo método da <a href="https://docs.unity3d.com/ScriptReference/Object.Destroy.html">Unity</a> chamado <code>Destroy(gameObject, timer)</code>, onde o <code>timer</code> é o tempo para que o objeto seja destruído após sua criação. Nada demais, mas já ajuda a manter a memória livre de objetos desnecessários.</p>

<p><strong>Organizando a casa</strong></p>

<p>Uma das alterações que fiz, seguindo a sugestão do leitor Felipe, foi colocar os assets baixados em um diretório separado ao invés de deixá-los jogados no projeto. Não tinha feito isso antes por ter apenas o <a href="https://www.assetstore.unity3d.com/en/#!/content/4392">Astra Starship Fleet Package</a>  no projeto, mas agora com o Skybox Volume 2 (Nebula) já faz mais sentido começar a organizar melhor. Ambos assets estão na pasta <code>ThirdParty Assets</code>, como mostra a imagem abaixo. Geralmente utilizo este nome ou algo parecido para esta pasta.</p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/07/ff-organizacao.jpg" alt="Final Frontier: Skybox e mais destruição"></p>

<p>Outra alteração que fiz foi criar um novo prefab chamado <code>TestAsteroidGroup</code>, e adicionei 9 caixas dentro dele para formar a parede. É sempre bom criar prefabs para agrupar objetos, mesmo sendo outros prefabs. Outro detalhe visto na imagem acima é que estou colocando prefabs e scripts em diretórios com o mesmo nome da minha cena <code>Playground</code>. Estou fazendo isto por que quero manter tudo usado no playground separado do protótipo, mas sem a necessidade de criar um novo projeto.</p>

<p><strong>Próximos passos</strong></p>

<p>Eu mencionei no post passado mas acabei não tendo tempo de trabalhar na movimentação da nave, pelo menos não na implementação. Pesquisei algumas opções de controle e câmera, e no próximo post vou falar mais sobre isto. Se eu tiver tempo também quero começar a fazer um sistema simples de spawn para os meteoros (e talvez até achar assets para substituir as caixas). </p>

<p>O andamento do projeto pode ser conferido no <a href="https://github.com/cicanci/game-unity-ff">GitHub</a>, e <a href="https://github.com/cicanci/game-unity-ff/tree/8cd709c9bea93b397767636e421b7d2a4c1afce8">neste link</a> você pode ver as alterações no projeto até este post (também sugestão do leitor Felipe). Todos posts desta série sobre meu projeto podem ser vistos na tag <a href="http://gamedeveloper.com.br/tag/final-frontier/">Final Frontier</a>, e como sempre qualquer sugestão ou opinião é bem vinda!</p>]]></content:encoded></item><item><title><![CDATA[Aprenda a Programar com Minecraft]]></title><description><![CDATA[<p><a href="https://minecraft.net/">Minecraft</a> conseguiu criar uma cultura e se tornou muito mais do que apenas um jogo, hoje é usado até na educação de crianças, como pode ser visto no documentário <a href="http://gamedeveloper.com.br/documentario-sobre-minecraft/">Minecraft: The Story of Mojang</a>. Hoje é possível até aprender a programar usando o jogo, e é isso que o livro</p>]]></description><link>http://gamedeveloper.com.br/programar-com-minecraft/</link><guid isPermaLink="false">22c00e3d-7a8b-4ae7-a6bd-e2c94d714a34</guid><category><![CDATA[livros]]></category><dc:creator><![CDATA[Bruno Cicanci]]></dc:creator><pubDate>Thu, 14 Jul 2016 00:45:00 GMT</pubDate><media:content url="http://gamedeveloper.com.br/content/images/2016/07/livro-minecraft-capa.jpg" medium="image"/><content:encoded><![CDATA[<img src="http://gamedeveloper.com.br/content/images/2016/07/livro-minecraft-capa.jpg" alt="Aprenda a Programar com Minecraft"><p><a href="https://minecraft.net/">Minecraft</a> conseguiu criar uma cultura e se tornou muito mais do que apenas um jogo, hoje é usado até na educação de crianças, como pode ser visto no documentário <a href="http://gamedeveloper.com.br/documentario-sobre-minecraft/">Minecraft: The Story of Mojang</a>. Hoje é possível até aprender a programar usando o jogo, e é isso que o livro <a href="http://novatec.com.br/livros/aprenda-programar-minecraft/">Aprenda a Programar com Minecraft</a> do <a href="https://www.nostarch.com/programwithminecraft">Craig Richardson</a> faz de uma maneira incrivelmente didática.</p>

<p>Este livro, lançado no Brasil pela editora <a href="http://novatec.com.br/livros/aprenda-programar-minecraft/">Novatec</a>, ensina lógica de programação utilizando a linguagem Python e usado o jogo Minecraft como ferramenta para exibir os resultados. Ou seja, após cada lição, é possível modificar e testar o que foi ensinado no jogo Minecraft para criar estruturas, blocos, itens, entre outras coisas. </p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/07/livro-minecraft-1.jpg" alt="Aprenda a Programar com Minecraft"></p>

<p>Todas as lições no livro possuem imagens do jogo para mostrar como é o resultado esperado, o que ajuda bastante. Ao invés de aprender a programar em Python utilizando o terminal ou prompt de comando, tudo que é programado pode ser visto no jogo, seja em formato visual (blocos, por exemplo) ou em mensagens de texto na tela do jogo. </p>

<p>O autor já trabalhou na <a href="https://www.raspberrypi.org/">Fundação Raspberry Pi</a>, por isso além de Windows e Mac também é possível seguir o livro utilizando Raspberry Pi. O capítulo inicial do livro ensina a configurar o ambiente de desenvolvimento, inclusive com o Minecraft API e Minecraft Server.</p>

<p>O livro cobre todo básico de programação com Python: variáveis, strings, condicionais, loops, funções, operações básicas de matemática e lógica, estruturas de dados como lista e dicionário, e como salvar o progresso ou estado do jogo em arquivos de texto. Por fim um ótimo capítulo, porém básico, sobre orientação a objetivos com Python, tudo para deixar o leitor com uma vontade de continuar aprendendo a programar e testar seus programas no Minecraft.</p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/07/livro-minecraft-3.jpg" alt="Aprenda a Programar com Minecraft"></p>

<p>Este livro é incrível para quem quer aprender a programar, e o uso do Minecraft é um grande diferencial para incentivar até mesmo crianças e adolescentes a entrarem para o lado negro da força e se tornarem programadores. Dependendo da idade provavelmente é necessário o acompanhamento de um adulto, pelo menos para configurar o computador e fazer os primeiros exercícios, mas depois acho que é possível continuar sozinho.</p>

<p>Após terminar este livro se você quiser continuar estudando desenvolvimento de jogos com Python, com certeza o próximo livro que eu indico é o <a href="http://gamedeveloper.com.br/introducao-jogos-python-pygame/">Introdução ao Desenvolvimento de Jogos em Python com PyGame</a>. Assim você terá toda base necessária para programar jogos em Python, ou pelo menos criar mods mais complexos para Minecraft. É claro que existem diversos livros sobre Python, mas acredito que estes dois são suficientes para iniciar tanto na programação em Python quanto desenvolvimento de jogos.</p>

<p>Muito obrigado a editora Novatec por me enviar este livro. Este livro pode ser adquirido pelo site da <a href="http://novatec.com.br/livros/aprenda-programar-minecraft/">Novatec</a> ou em praticamente qualquer livraria. Recomendo também dar uma olhada no site do autor, <a href="https://www.nostarch.com/programwithminecraft">Craig Richardson</a>, pois tem bastante conteúdo adicional para o livro disponível lá (em Inglês).</p>]]></content:encoded></item><item><title><![CDATA[Final Frontier: Playground e destruição]]></title><description><![CDATA[<p>Este é o segundo post sobre o jogo que estou desenvolvendo no meu tempo livre, o <a href="http://gamedeveloper.com.br/inicio-do-projeto-final-frontier/">Final Frontier</a>. Neste post vou falar sobre como estou usando o playground para descobrir a mecânica do jogo e também como fiz um modelo 3D ser destruído. </p>

<p>O jogo está em desenvolvimento publicamente no</p>]]></description><link>http://gamedeveloper.com.br/final-frontier-playground-e-destruicao/</link><guid isPermaLink="false">bf3efdaa-57db-4db9-9a1b-30e61af54d68</guid><category><![CDATA[final frontier]]></category><dc:creator><![CDATA[Bruno Cicanci]]></dc:creator><pubDate>Wed, 06 Jul 2016 16:40:00 GMT</pubDate><media:content url="http://gamedeveloper.com.br/content/images/2016/07/ff-prototype-2.png" medium="image"/><content:encoded><![CDATA[<img src="http://gamedeveloper.com.br/content/images/2016/07/ff-prototype-2.png" alt="Final Frontier: Playground e destruição"><p>Este é o segundo post sobre o jogo que estou desenvolvendo no meu tempo livre, o <a href="http://gamedeveloper.com.br/inicio-do-projeto-final-frontier/">Final Frontier</a>. Neste post vou falar sobre como estou usando o playground para descobrir a mecânica do jogo e também como fiz um modelo 3D ser destruído. </p>

<p>O jogo está em desenvolvimento publicamente no <a href="https://github.com/cicanci/game-unity-ff">GitHub</a>, então dependendo de quando você ler este post pode ser que muita coisa tenha mudado. Mesmo assim, as dicas aqui podem ser aplicadas em seu projeto. </p>

<p><strong>Como brincar no playground</strong></p>

<p>Como disse no post anterior, o <a href="http://gamedeveloper.com.br/como-ser-um-programador-de-jogos-playground/">playground</a> não é um <a href="http://gamedeveloper.com.br/como-ser-um-programador-de-jogos-prototipos/">protótipo</a>. O playground é usado para experimentar ideias, enquanto o protótipo é usado para validar o gameplay. Por isso, existem algumas boas práticas que eu gosto de seguir aqui.</p>

<p>A primeira dica é deixar bem claro o que pertence ao playground no projeto. Como o playground pode fazer parte do projeto de um protótipo ou da versão final, é comum utilizar scripts e assets de test ou finais no playground. No meu caso eu estou usando este playground antes de iniciar o desenvolvimento do protótipo, então decidi separar prefabs e scripts em uma pasta "Playground". </p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/07/project-organization.png" alt="Final Frontier: Playground e destruição"></p>

<p>Os scripts estão dentro de um namespace chamado "Playground", e quando usados exibem o log de warning abaixo. Este é uma dica que aprendi recentemente lendo a <a href="http://gamedeveloper.com.br/dicas-de-john-romero/">entrevista do John Romero</a>, onde ele fala que é sempre bom exibir na tela o que está acontecendo, principalmente o que não é esperado. Como este projeto deve crescer e ter muitos scripts e prefabs, eu quero ter certeza de que algum prefab com script de playground será esquecido no jogo. </p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/07/playground-warnings.png" alt="Final Frontier: Playground e destruição"></p>

<p>É sempre bom criar opções para debug visual enquanto o projeto está rodando e aproveitando os recursos do editor da Unity. Na imagem abaixo eu criei um <code>Boolean</code> chamado <code>cameraFollow</code> que pode ser habilitado durante a execução para fazer a câmera do jogo deixar de seguir a nave. Eu não coloquei o objeto da câmera dentro da nave para que durante sua movimentação não dê a impressão ser "dura". Isso vai fazer mais sentido quando implementar o controle completo da nave.</p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/07/spaceship-script.png" alt="Final Frontier: Playground e destruição"></p>

<p><strong>Destruindo objetos 3D</strong></p>

<p>Destruição de objetos e cenário é algo que sempre quis implementar mas nunca tive uma oportunidade. Pode parecer algo muito complicado mas na verdade é simples de entender a idéia por trás. Basicamente você tem dois modelos: um normal e um "destruído", e quando o objeto é destruído você substitui pelo modelo destruído e aplica alguma física nos destroços se necessário.</p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/07/blender-block.png" alt="Final Frontier: Playground e destruição"></p>

<p>Como eu quero utilizar apenas ferramentas e assets gratuitos neste projeto, escolhi utilizar o blender para fazer um moledo de um cubo inteiro e um cubo destruído. O video abaixo ensina como fazer isto no blender e como adicionar a física necessária na Unity, mas basicamente você precisa aplicar <code>Cell Fracture</code> com <code>Noise</code> no modelo e importar na Unity adicionando um <code>Mesh Collider</code> em cada pedaço.</p>

<iframe width="640" height="360" src="https://www.youtube.com/embed/videoseries?list=PLbghT7MmckI6FPAZfn2HBdOu-JGSZ39vS" frameborder="0" allowfullscreen></iframe>

<p><strong>Próximos passos</strong></p>

<p>Vou tentar escrever um post sobre este projeto a cada duas semanas. Como costumo publicar um post por semana vou intercalar posts sobre o andamento do projeto com o conteúdo do blog, assim consigo falar do projeto e ainda mostrar técnicas e dicas que estou usando em seu desenvolvimento. Através desta <a href="http://gamedeveloper.com.br/tag/final-frontier">tag</a> você poderá ver todos os posts sobre o projeto.</p>

<p>Fique a vontade para baixar o projeto no <a href="https://github.com/cicanci/game-unity-ff">GitHub</a> e comentar aqui no post suas opiniões e sugestões. Para o próximo post pretendo implementar o controle da nave, spawn de asteroides pelo caminho e mais alguns detalhes no playground. Embora demore duas semanas para eu publicar o próximo post, você pode acompanhar meu trabalho no jogo pelo GitHub, pois sempre que possível vou trabalhar neste projeto durante a semana.</p>]]></content:encoded></item><item><title><![CDATA[Livros para desenvolver jogos - atualizado!]]></title><description><![CDATA[<p>Fazem quase 7 anos que escrevi este <a href="http://gamedeveloper.com.br/livros-de-desenvolvimento-de-jogos/">post</a> com uma lista de livros para desenvolvimento de jogos. Naquela época a lista foi baseada em duas coisas: o conteúdo da pós-graduação que eu estava cursando e o que estava disponível no momento. Felizmente, 7 anos depois, muitos livros novos surgiram e</p>]]></description><link>http://gamedeveloper.com.br/livros-gamedev/</link><guid isPermaLink="false">a9e75b91-02db-4f37-9556-23204e42f07a</guid><category><![CDATA[livros]]></category><dc:creator><![CDATA[Bruno Cicanci]]></dc:creator><pubDate>Thu, 30 Jun 2016 01:32:12 GMT</pubDate><media:content url="http://gamedeveloper.com.br/content/images/2016/06/capa-livros.jpg" medium="image"/><content:encoded><![CDATA[<img src="http://gamedeveloper.com.br/content/images/2016/06/capa-livros.jpg" alt="Livros para desenvolver jogos - atualizado!"><p>Fazem quase 7 anos que escrevi este <a href="http://gamedeveloper.com.br/livros-de-desenvolvimento-de-jogos/">post</a> com uma lista de livros para desenvolvimento de jogos. Naquela época a lista foi baseada em duas coisas: o conteúdo da pós-graduação que eu estava cursando e o que estava disponível no momento. Felizmente, 7 anos depois, muitos livros novos surgiram e alguns foram traduzidos e lançados no Brasil, inclusive fiz <a href="http://gamedeveloper.com.br/tag/livros/">review</a> de grande parte deles.</p>

<p>Não foi só isso que mudou. 7 anos atrás eu ainda não trabalhava com jogos e este blog estava começando, tinha apenas 4 meses de existência e uns 5 posts. Estava na hora de escrever um novo post atualizado com sugestões de livros. Sempre que me perguntam por e-mail ou realizo palestras costumo sugerir a lista abaixo, que na minha opinião muitos são leituras obrigatórias para todo desenvolvedor de jogos. Clique nas imagens para conferir mais detalhes dos livros.</p>

<p><a href="https://amzn.com/B00P5URD96"><img src="http://gamedeveloper.com.br/content/images/2016/06/gpp.jpg" alt="Livros para desenvolver jogos - atualizado!" title=""></a></p>

<p><a href="https://amzn.com/0321940156"><img src="http://gamedeveloper.com.br/content/images/2016/06/gpat.jpg" alt="Livros para desenvolver jogos - atualizado!" title=""></a></p>

<p><a href="https://amzn.com/1556220782"><img src="http://gamedeveloper.com.br/content/images/2016/06/gameai.jpg" alt="Livros para desenvolver jogos - atualizado!" title=""></a></p>

<p><a href="https://amzn.com/1449392512"><img src="http://gamedeveloper.com.br/content/images/2016/06/physics.jpg" alt="Livros para desenvolver jogos - atualizado!" title=""></a></p>

<p><a href="https://amzn.com/0321618521"><img src="http://gamedeveloper.com.br/content/images/2016/06/scrum.jpg" alt="Livros para desenvolver jogos - atualizado!" title=""></a></p>

<p><a href="https://amzn.com/1482217163"><img src="http://gamedeveloper.com.br/content/images/2016/06/gdw3.jpg" alt="Livros para desenvolver jogos - atualizado!" title=""></a></p>

<p><a href="http://loja.grupoa.com.br/livros/serie-microsoft/code-complete/8536305045"><img src="http://gamedeveloper.com.br/content/images/2016/06/codecomplete.jpg" alt="Livros para desenvolver jogos - atualizado!" title=""></a></p>

<p><a href="https://www.blucher.com.br/livro/detalhes/level-up-817"><img src="http://gamedeveloper.com.br/content/images/2016/06/levelup.jpg" alt="Livros para desenvolver jogos - atualizado!" title=""></a></p>

<p><a href="http://loja.grupoa.com.br/livros/gerenciamento-de-projetos/manual-de-producao-de-jogos-digitais/9788540701830"><img src="http://gamedeveloper.com.br/content/images/2016/06/producao.jpg" alt="Livros para desenvolver jogos - atualizado!" title=""></a></p>

<p><a href="http://novatec.com.br/livros/jogos2/"><img src="http://gamedeveloper.com.br/content/images/2016/06/gamedev2.jpg" alt="Livros para desenvolver jogos - atualizado!" title=""></a></p>

<p>Apesar de serem muitos livros, foi difícil deixar alguns de fora desta lista. Provavelmente irei fazer outro lista em um post futuro com mais livros. Comparada com a lista do meu post de 7 anos atrás apenas dois livros permanecera: Game Design Workshop, que ganhou uma nova edição, e Desenvolvimento de Jogos Eletrônicos, que está novamente esgotado. Os últimos quatro livros da lista são em português e estão disponíveis no Brasil, confira as reviews do livro <a href="http://gamedeveloper.com.br/level-up-game-design/">Level Up!</a> e do livro <a href="http://gamedeveloper.com.br/manual-de-producao-de-jogos-digitais/">Produção de Jogos Digitais</a>, os demais estão disponíveis apenas em inglês.</p>

<p>Neste <a href="http://gamedeveloper.com.br/como-ser-um-programador-de-jogos-livros/">post</a> existem mais sugestões de livros em português lançados no Brasil, porém eu recomendo dar uma olhada nos livros em <a href="http://gamedeveloper.com.br/como-ser-um-programador-de-jogos-pre-requisitos/">inglês</a> também. Nesta lista selecionei 10 livros que são bem abrangentes em seus assuntos, porém na próxima lista os livros serão mais específicos para um determinado assunto, como matemática para jogos, game design de jogos de tabuleiro, efeitos sonoros, entre outros.</p>]]></content:encoded></item><item><title><![CDATA[Inicio do projeto Final Frontier]]></title><description><![CDATA[<p>Como eu havia comentado neste <a href="http://gamedeveloper.com.br/nao-vamos-fazer-um-jogo-juntos/">post</a> decidi começar um novo projeto no meu tempo livre e colocar em um repositório público no <a href="https://github.com/cicanci/game-unity-ff">GitHub</a> para quem quiser acompanhar o desenvolvimento do jogo em Unity. Este é o primeiro de uma série de posts que vão contar detalhes sobre o desenvolvimento deste</p>]]></description><link>http://gamedeveloper.com.br/inicio-do-projeto-final-frontier/</link><guid isPermaLink="false">186afc49-6c3a-4c38-85e9-6c60ca588287</guid><category><![CDATA[final frontier]]></category><dc:creator><![CDATA[Bruno Cicanci]]></dc:creator><pubDate>Wed, 22 Jun 2016 23:06:00 GMT</pubDate><media:content url="http://gamedeveloper.com.br/content/images/2016/06/capa-jogos.jpg" medium="image"/><content:encoded><![CDATA[<img src="http://gamedeveloper.com.br/content/images/2016/06/capa-jogos.jpg" alt="Inicio do projeto Final Frontier"><p>Como eu havia comentado neste <a href="http://gamedeveloper.com.br/nao-vamos-fazer-um-jogo-juntos/">post</a> decidi começar um novo projeto no meu tempo livre e colocar em um repositório público no <a href="https://github.com/cicanci/game-unity-ff">GitHub</a> para quem quiser acompanhar o desenvolvimento do jogo em Unity. Este é o primeiro de uma série de posts que vão contar detalhes sobre o desenvolvimento deste projeto, fazendo referências aos posts da série <a href="http://gamedeveloper.com.br/como-ser-um-programador-de-jogos/">como ser um programador de jogos</a>.  Neste post, quero contar um pouco sobre como surgiu a ideia para este projeto e onde quero chegar com ele.</p>

<p>Eu sempre fui um fã de jogos com tema de ficção científica, e entre meus favoritos estão as séries <a href="https://en.wikipedia.org/wiki/Metroid">Metroid</a>, <a href="https://en.wikipedia.org/wiki/StarCraft">Starcraft</a>, <a href="https://en.wikipedia.org/wiki/Halo_(series)">Halo</a>, <a href="https://en.wikipedia.org/wiki/Mass_Effect">Mass Effect</a>, <a href="https://en.wikipedia.org/wiki/Endless_Space">Endless Space</a>, <a href="https://en.wikipedia.org/wiki/Star_Wars:_Knights_of_the_Old_Republic">Star Wars: Knighs of the Old Republic</a> e <a href="https://en.wikipedia.org/wiki/Destiny_(video_game)">Destiny</a>. Até nos jogos de tabuleiro tenho essa preferência pelo tema e gosto muito dos jogos <a href="http://www.ludopedia.com.br/jogo/race-for-the-galaxy">Race for the Galaxy</a>, <a href="http://www.ludopedia.com.br/jogo/roll-for-the-galaxy">Roll for the Galaxy</a>, <a href="http://">Star Trek Catan</a>, <a href="http://www.ludopedia.com.br/jogo/star-realms">Star Realms</a>, e muitos outros que ainda não tenho. E nem preciso falar que sou fã de <a href="http://www.imdb.com/title/tt0076759/?ref_=nv_sr_3">Star Wars</a>, <a href="http://www.imdb.com/title/tt0060028/?ref_=nv_sr_3">Star Trek</a>, <a href="http://www.imdb.com/title/tt0436992/?ref_=nv_sr_1">Doctor Who</a>, <a href="http://www.imdb.com/title/tt0407362/?ref_=tt_rec_tt">Battlestar Galactica</a> e <a href="http://www.imdb.com/title/tt0303461/?ref_=tt_rec_tti">Firefly</a>. Muitos dos meus livros favoritos são dos autores <a href="https://en.wikipedia.org/wiki/Isaac_Asimov">Isaac Asimov</a> e <a href="https://en.wikipedia.org/wiki/Douglas_Adams">Douglas Adams</a>.</p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/06/jogos1.jpg" alt="Inicio do projeto Final Frontier"></p>

<p>Por causa de todas estas referências acima decidi iniciar o desenvolvimento de um jogo de ficção científica. Ainda não defini como o jogo será, por isso iniciei o desenvolvimento de um <a href="http://gamedeveloper.com.br/como-ser-um-programador-de-jogos-playground/">playground</a> para explorar ideias. O playground é um pouco diferente de um <a href="http://gamedeveloper.com.br/como-ser-um-programador-de-jogos-prototipos/">protótipo</a> por que nele o objetivo é a exploração, e não a validação de uma mecânica ou ideia.</p>

<p>Uma coisa eu já defini: quero que tenha uma nave para o jogador pilotar e que exista combates e exploração no espaço. Por isso, iniciei o projeto com um modelo 3D de nave gratuita que baixei na Asset Store da Unity e fiz ela atirar "bolas de ping-pong" em um cubo, enquanto se move. Como estou explorando a mecânica, os scripts utilizados até agora não foram escritos pensando em serem reutilizados no jogo. Outro detalhe definido é o nome do jogo: Final Frontier; uma referência a  <a href="https://en.wikipedia.org/wiki/Where_no_man_has_gone_before">Star Trek</a> e minha homenagem ao <a href="https://en.wikipedia.org/wiki/Leonard_Nimoy">Leonard Nimoy</a>.</p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/06/ff-prototype.jpg" alt="Inicio do projeto Final Frontier"></p>

<p>O meu objetivo é desenvolver todo o protótipo do jogo utilizando a Unity e deixando o projeto público no GitHub, por isso todos recursos e plugins utilizados serão sempre gratuitos e com os devidos créditos adicionados. Se eu decidir que vale a pena investir neste projeto provavelmente irei terminar o desenvolvimento do protótipo e iniciar o desenvolvimento do jogo em um repositório particular, mas isto é algo pra se pensar quando o jogo estiver definido e testado. Durante o desenvolvimento do protótipo pretendo também criar e disponibilizar documentos, como o <a href="http://gamedeveloper.com.br/game-design-document/">Game Design Document</a>.</p>

<p>Qualquer feedback é sempre bem-vindo! E se você não conhece algumas das minhas referências, recomendo dar uma olhada pois vale muito a pena! Ah, a imagem da capa foi tirada em uma partida de Star Trek Catan, tão bom quanto o jogo original.</p>]]></content:encoded></item><item><title><![CDATA[Tutoriais de desenvolvimento de jogos com Unity e Blender]]></title><description><![CDATA[<p>Semana passada estava procurando um video sobre como fazer um FPS com Unity para o projeto que comentei neste <a href="http://gamedeveloper.com.br/nao-vamos-fazer-um-jogo-juntos/">post</a>. Eu já fiz jogos com mecânicas de FPS, porém eu sempre procuro tutoriais sobre o que eu quero fazer para aprender maneiras diferentes de fazer as mesmas coisas.</p>

<p>Está é</p>]]></description><link>http://gamedeveloper.com.br/tutoriais-jogos-unity/</link><guid isPermaLink="false">428d639f-4f8c-4509-930d-8c12911d693f</guid><category><![CDATA[game dev]]></category><dc:creator><![CDATA[Bruno Cicanci]]></dc:creator><pubDate>Wed, 15 Jun 2016 21:41:11 GMT</pubDate><media:content url="http://gamedeveloper.com.br/content/images/2016/06/unity3d1.jpg" medium="image"/><content:encoded><![CDATA[<img src="http://gamedeveloper.com.br/content/images/2016/06/unity3d1.jpg" alt="Tutoriais de desenvolvimento de jogos com Unity e Blender"><p>Semana passada estava procurando um video sobre como fazer um FPS com Unity para o projeto que comentei neste <a href="http://gamedeveloper.com.br/nao-vamos-fazer-um-jogo-juntos/">post</a>. Eu já fiz jogos com mecânicas de FPS, porém eu sempre procuro tutoriais sobre o que eu quero fazer para aprender maneiras diferentes de fazer as mesmas coisas.</p>

<p>Está é uma boa dica que gostaria de deixar neste post: mesmo que você saiba fazer algo existe sempre outras maneiras de fazer, que podem ser melhores, iguais ou piores do que a maneira que você costuma fazer. Por isso é muito importante sempre pesquisar na internet, ler livros e assistir videos sobre o assunto, com certeza pelo menos um detalhe novo deve surgir e vai te ajudar.</p>

<p>Voltando ao assunto do post, eu encontrei este canal (em Inglês) chamado <a href="https://www.youtube.com/user/quill18creates">quill18creates</a> com muitos videos sobre desenvolvimento de jogos para Unity e Blender. O autor do canal, <a href="http://quill18.com/">Martin "quill18" Glaude</a>, possui um outro canal com foco jogos chamado <a href="https://www.youtube.com/user/quill18">quill18</a>. </p>

<p>Vou colocar alguns videos que gostei abaixo, porém recomendo dar uma olhada em nos outros videos e <a href="https://www.youtube.com/user/quill18creates/playlists">playlists</a> do canal. As playlists abaixo contém videos sobre geração procedural, algoritmo pathfind para movimentação e objetos destrutíveis, respectivamente.</p>

<iframe width="640" height="360" src="https://www.youtube.com/embed/videoseries?list=PLbghT7MmckI6Tm0jUrhLZG8sEBI1hgCL8" frameborder="0" allowfullscreen></iframe>

<iframe width="640" height="360" src="https://www.youtube.com/embed/videoseries?list=PLbghT7MmckI55gwJLrDz0UtNfo9oC0K1Q" frameborder="0" allowfullscreen></iframe>

<iframe width="640" height="360" src="https://www.youtube.com/embed/videoseries?list=PLbghT7MmckI6FPAZfn2HBdOu-JGSZ39vS" frameborder="0" allowfullscreen></iframe>

<p>Se você conhece outros canais no YouTube sobre desenvolvimento de jogos deixe nos comentários!</p>]]></content:encoded></item></channel></rss>