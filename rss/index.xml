<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title><![CDATA[Game Developer]]></title><description><![CDATA[Bruno Cicanci]]></description><link>http://gamedeveloper.com.br/</link><generator>Ghost 0.11</generator><lastBuildDate>Sun, 04 Dec 2016 00:05:58 GMT</lastBuildDate><atom:link href="http://gamedeveloper.com.br/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Por que você faz ou quer fazer jogos?]]></title><description><![CDATA[<p>Acredito que se você está lendo este texto existem grandes chances de você querer desenvolver jogos ou já trabalhar na área. É muito provável que alto te motivou a querer isso, algo mais sério do que "escolhi por que eu gosto de jogar", já que exige muita dedicação para fazer</p>]]></description><link>http://gamedeveloper.com.br/por-que-voce-faz-ou-quer-fazer-jogos/</link><guid isPermaLink="false">5aa511ff-d117-4a2e-a7a5-f134b94e3d68</guid><dc:creator><![CDATA[Bruno Cicanci]]></dc:creator><pubDate>Sun, 04 Dec 2016 00:05:00 GMT</pubDate><media:content url="http://gamedeveloper.com.br/content/images/2016/12/porque-gamedev-capa.jpg" medium="image"/><content:encoded><![CDATA[<img src="http://gamedeveloper.com.br/content/images/2016/12/porque-gamedev-capa.jpg" alt="Por que você faz ou quer fazer jogos?"><p>Acredito que se você está lendo este texto existem grandes chances de você querer desenvolver jogos ou já trabalhar na área. É muito provável que alto te motivou a querer isso, algo mais sério do que "escolhi por que eu gosto de jogar", já que exige muita dedicação para fazer carreira na indústria de jogos.</p>

<p>Pra mim o interesse surgiu por que eu gostava de jogar, mas quando comecei a estudar Ciência da Computação percebi que era algo muito desafiador de criar e compensador de ver alguém jogando o que você criou. Já escrevi alguns posts sobre este assunto, e recomendo dar uma lida no <a href="http://gamedeveloper.com.br/vi-uma-pessoa-jogando-um-jogo-que-fiz-na-ea/">O dia em que vi uma pessoa jogando um jogo que fiz na Electronic Arts</a> e no <a href="http://gamedeveloper.com.br/por-isso-que-faco-jogos/">É por isso que faço jogos!</a>, ambos são exemplos de recompensa que um desenvolvedor de jogos por ter. Algo tão simples, mas que faz todo trabalho valer a pena (pelo menos pra mim).</p>

<p>Semana passada aconteceu o <a href="https://www.youtube.com/watch?v=d9O7N3GkG_o">Video Game Awards</a> em Los Angeles, um premiação para as empresas e pessoas que criaram as melhores experiências no ano. Fiquei com vontade de escrever este posts pois dois prêmios tiveram discursos muito emocionantes, que descrevem tudo que escrevi aqui. Confiram abaixo o discurso do desenvolvedor do <a href="http://www.thatdragoncancer.com/">That Dragon, Cancer</a> e do youtuber <a href="https://www.youtube.com/user/boogie2988">Boogie2988</a>.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/AAL91-GONxk" frameborder="0" allowfullscreen></iframe>

<iframe width="560" height="315" src="https://www.youtube.com/embed/RV2h9wWj4_Y" frameborder="0" allowfullscreen></iframe>

<p>Então, por que você faz ou quer fazer jogos?</p>

<p>Imagem da capa: <a href="https://www.shutterstock.com/pic-402752074/stock-photo-technology-gaming-entertainment-lets-play-and-people-concept-angry-screaming-young-man-in-headset-with-pc-computer-playing-game-at-home-and-streaming-playthrough-or-walkthrough-video.html">Playing game</a> do Shutterstock.</p>]]></content:encoded></item><item><title><![CDATA[ANCINE lança edital inédito para produção de jogos eletrônicos]]></title><description><![CDATA[<p>Recebi o e-mail abaixo e achei que seria interessante de postar aqui, embora seja um pouco em cima da hora.</p>

<hr>

<p>A Agência Nacional do Cinema – ANCINE anuncia na segunda-feira, dia 5 de dezembro, em São Paulo, o lançamento da chamada pública PRODAV 14/2016, primeiro edital do Programa Brasil de</p>]]></description><link>http://gamedeveloper.com.br/ancine-edital-producao-jogos/</link><guid isPermaLink="false">bae99b56-4c04-4a48-9823-3bd054af1e2e</guid><category><![CDATA[game dev]]></category><dc:creator><![CDATA[Bruno Cicanci]]></dc:creator><pubDate>Sat, 03 Dec 2016 23:30:00 GMT</pubDate><media:content url="http://gamedeveloper.com.br/content/images/2016/12/ancine-capa.jpg" medium="image"/><content:encoded><![CDATA[<img src="http://gamedeveloper.com.br/content/images/2016/12/ancine-capa.jpg" alt="ANCINE lança edital inédito para produção de jogos eletrônicos"><p>Recebi o e-mail abaixo e achei que seria interessante de postar aqui, embora seja um pouco em cima da hora.</p>

<hr>

<p>A Agência Nacional do Cinema – ANCINE anuncia na segunda-feira, dia 5 de dezembro, em São Paulo, o lançamento da chamada pública PRODAV 14/2016, primeiro edital do Programa Brasil de Todas as Telas voltado ao investimento na produção de obras audiovisuais brasileiras independentes de jogos eletrônicos.</p>

<p>A Chamada Pública PRODAV 14/2016 vai disponibilizar R$ 10 milhões em recursos do Fundo Setorial do Audiovisual (FSA) para a produção de jogos eletrônicos voltados à exploração comercial em consoles, computadores ou dispositivos móveis. <br>
Poderão participar do edital empresas produtoras audiovisuais e desenvolvedoras de jogos eletrônicos registradas e classificadas na ANCINE como agente econômico brasileiro independente.</p>

<p>O anúncio será feito pela Diretoria Colegiada da ANCINE na Cinemateca Brasileira de São Paulo.</p>

<p>Confirme sua presença pelo e-mail: <a href="mailto://comunicacao@ancine.gov.br">comunicacao@ancine.gov.br</a></p>

<p><strong>Evento:</strong> Lançamento do edital PRODAV 14/206 – produção de jogos eletrônicos</p>

<p><strong>Onde:</strong> Cinemateca Brasileira – Sala Petrobras
Largo Sen. Raul Cardoso, 207 – Vila Clementino, São Paulo</p>

<p><strong>Dia:</strong> segunda-feira, 5 de dezembro</p>

<p><strong>Horário:</strong> 10h</p>]]></content:encoded></item><item><title><![CDATA[Engines e frameworks open source no GitHub]]></title><description><![CDATA[<p>O <a href="https://github.com">GitHub</a> é uma ótima plataforma para versionamento de projetos com código aberto usando git, mas ele não é apenas isso. Existem muitas features no GitHub que as vezes parecem escondidas mas valem muito a pena ver. Uma parte que eu descobri recentemente foi a página <a href="https://github.com/showcases">Showcases</a>, que agrupa listas</p>]]></description><link>http://gamedeveloper.com.br/engines-frameworks-open-source-github/</link><guid isPermaLink="false">bfbffb10-8ce3-45fb-a051-b64603f80452</guid><category><![CDATA[game dev]]></category><dc:creator><![CDATA[Bruno Cicanci]]></dc:creator><pubDate>Sun, 27 Nov 2016 23:03:00 GMT</pubDate><media:content url="http://gamedeveloper.com.br/content/images/2016/12/engines-capa.jpg" medium="image"/><content:encoded><![CDATA[<img src="http://gamedeveloper.com.br/content/images/2016/12/engines-capa.jpg" alt="Engines e frameworks open source no GitHub"><p>O <a href="https://github.com">GitHub</a> é uma ótima plataforma para versionamento de projetos com código aberto usando git, mas ele não é apenas isso. Existem muitas features no GitHub que as vezes parecem escondidas mas valem muito a pena ver. Uma parte que eu descobri recentemente foi a página <a href="https://github.com/showcases">Showcases</a>, que agrupa listas de projetos por categorias. Não todos, mas os mais populares.</p>

<p><a href="https://github.com/showcases/game-engines">Neste link</a> está a lista de game engines e frameworks que são open source, populares e ativos no GitHub. Abaixo vou comentar sobre algumas engines e frameworks que eu conheço e já usei, mas recomendo você a conhecer todas as 24 que estão no link (assim como eu também vou fazer!).</p>

<h3 id="cocos2dxhttpsgithubcomcocos2dcocos2dx"><a href="https://github.com/cocos2d/cocos2d-x">cocos2d-x</a></h3>

<p>Esta é um dos meus frameworks preferidos para fazer jogos em C++. Conheci há uns 4 anos quando estava trabalhando na Electronic Arts, e desde então sempre usei para fazer protótipos e até um jogo na última edição do <a href="http://gamedeveloper.com.br/ludum-dare-36/">Ludum Dare</a>. </p>

<p>Nesses 4 anos este framework cresceu muito, ganhou ótimas tools e suporte de muitos desenvolvedores. Mudou tanto que quando fui utilizar no Ludum Dare tive que dar uma estudada novamente na documentação por que mudaram praticamente todas as classes e a maneira de usar algumas coisas, principalmente se adaptando ao C++11. </p>

<h3 id="cryenginehttpsgithubcomcrytekcryenginecryengine"><a href="https://github.com/CRYTEK-CRYENGINE/CRYENGINE">CRYENGINE</a></h3>

<p>Embora eu conheça este engine há um tempo, só quando se tornou open source que eu tive oportunidade de testar. Ainda não fiz algo maior que um protótipo simples com ela, mas quem sabe no futuro não uso em algum projeto ou game jam. A linguagem de programação utilizada também é C++.</p>

<p>Se o seu computador consegue rodar Crysis baixe esta engine e faça alguns tutoriais para conhecê-la. Uma curiosidade: a engine da Amazon, <a href="https://aws.amazon.com/pt/lumberyard/">Lumberyard</a>, foi feita em cima da CRYENGINE.</p>

<h3 id="monogamehttpsgithubcommonogamemonogame"><a href="https://github.com/MonoGame/MonoGame">MonoGame</a></h3>

<p>O <a href="http://www.mono-project.com/">Mono</a> surgiu como um projeto open source para permitir o desenvolvimento de software com C# em sistemas Unix (Linux e Mac), e o MonoGame surgiu como um framework semelhante ao <a href="https://en.wikipedia.org/wiki/Microsoft_XNA">XNA</a> da Microsoft para desenvolvimento de jogos.</p>

<p>O XNA foi um framework muito especial pra mim, fiz vários projetos nele quando comecei a estudar desenvolvimento de jogos, e até o meu TCC por eu ter experiência com C# na época. Eu usei o MonoGame algumas vezes mas não gostei muito, acho que estava esperando algo realmente como o XNA, porem ele tem suas próprias características. Mesmo assim, vale a pena dar uma olhada.</p>

<h3 id="torque2dhttpsgithubcomgaragegamestorque2detorque3dhttpsgithubcomgaragegamestorque3d"><a href="https://github.com/GarageGames/Torque2D">Torque2D</a> e <a href="https://github.com/GarageGames/Torque3D">Torque3D</a></h3>

<p>A Torque foi a primeira engine que eu ouvi falar por que um amigo estava fazendo seu TCC com ela quando eu trabalhei na Level Up! Games. Naquela época ela era a opção com melhor custo/benefício, e acho que existia apenas a versão 3D. </p>

<p>Há algum tempo a GarageGames abriu o código das suas duas engines para poder continuar atraindo desenvolvedores, já que hoje existem muitas opções gratuitas. </p>

<h3 id="outrasengineseframeworks">Outras engines e frameworks</h3>

<p>Embora não esteja nesta lista, por ser um repositório privado, a <a href="https://github.com/EpicGames">Unreal Engine</a> tem seu código aberto e basta se cadastrar no site para ter acesso. Existem outras engines e framworks que são open source porém não estão hospedadas no GitHub, como os frameworks <a href="https://www.libsdl.org/">SDL</a> e <a href="http://irrlicht.sourceforge.net/">Irrlicht</a>. Como o objetivo do post foi comentar sobre esta lista do GitHub não coloquei aqui as opções que não estão lá, mas basta dar uma olhada na <a href="https://en.wikipedia.org/wiki/List_of_game_engines">Wikipedia</a> que você encontrará muitas opções.</p>

<p>Imagem da capa: <a href="http://www.shutterstock.com/pic-421787956/stock-photo-game-developing-on-the-golden-gears-game-developing-industrial-illustration-with-glow-effect-and-lens-flare-game-developing-on-the-mechanism-of-golden-cogwheels-with-glow-effect-3d.html?language=pt&amp;src=menHCfzNhb7cliJ00klB4g-1-33">Game Developing on the Golden Gears</a> do Shutterstock.</p>]]></content:encoded></item><item><title><![CDATA[Final Frontier: Upgrades e Save Game]]></title><description><![CDATA[<p>Estou um pouco atrasado com este projeto, mas ele não está parado! Neste último fim de semana tive mais tempo para trabalhar no projeto, e comecei a mover algumas coisas de <code>playground</code> para <code>prototype</code>. Isto significa que a fase de experimentar coisas está chegando ao fim e que logo (eu</p>]]></description><link>http://gamedeveloper.com.br/final-frontier-upgrades-e-save-game/</link><guid isPermaLink="false">486292a5-ace3-4fdd-b763-4db3d4b4a077</guid><category><![CDATA[final frontier]]></category><dc:creator><![CDATA[Bruno Cicanci]]></dc:creator><pubDate>Sun, 20 Nov 2016 02:07:00 GMT</pubDate><media:content url="http://gamedeveloper.com.br/content/images/2016/11/inventario-itens-capa.jpg" medium="image"/><content:encoded><![CDATA[<img src="http://gamedeveloper.com.br/content/images/2016/11/inventario-itens-capa.jpg" alt="Final Frontier: Upgrades e Save Game"><p>Estou um pouco atrasado com este projeto, mas ele não está parado! Neste último fim de semana tive mais tempo para trabalhar no projeto, e comecei a mover algumas coisas de <code>playground</code> para <code>prototype</code>. Isto significa que a fase de experimentar coisas está chegando ao fim e que logo (eu espero!) todos os testes que fiz serão um protótipo jogável.</p>

<p><strong>Itens de Upgrade</strong></p>

<p>Existe um recurso no Unity que eu gosto muito de usar, os <a href="https://unity3d.com/pt/learn/tutorials/modules/beginner/live-training-archive/scriptable-objects">Scriptable Objects</a>. Eles são arquivos para armazenar dados gerados a partir de classes que pode ter qualquer coisa, desde que seja serializado. O vídeo abaixo é um treinamento da Unity e um excelente tutorial explicando como usar este recurso, vale a pena assistir!</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/9gscwiS3xsU" frameborder="0" allowfullscreen></iframe>

<p>Eu fiz uma classe para definir algumas características dos itens, como ID, bonus, tipo, e outras coisas que nem sei se vou usar mas coloquei para ter mais dados para testar. Também criei uma outra classe para armazenar todos os itens, assim eu posso selecionar qualquer item a partir de algum filtro usando <a href="https://msdn.microsoft.com/en-us/library/bb397906.aspx">LINQ</a>.</p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/11/item-attack.jpg" alt="Final Frontier: Upgrades e Save Game"></p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/11/item-list.jpg" alt="Final Frontier: Upgrades e Save Game"></p>

<p><strong>Salvando o progresso do jogo</strong></p>

<p>Ainda é cedo para o jogo ter um progresso para ser salvo, mas comecei a construir a base para poder montar o inventário baseado em um arquivo com os dados do jogador. Fiz uma classe para armazenar as informações básicas da nave, como nível, nome e classe, e uma matrix para armazenar itens por slot (10 slots na interface com 10 itens em cada). O video abaixo, também de um treinamento da Unity, é um excelente tutorial mostrando as diferenças entre usar o <code>PlayerPrefs</code> e serializar dados em uma classe.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/J6FfcJpbPXE" frameborder="0" allowfullscreen></iframe>

<p><strong>Itens na interface</strong></p>

<p>Criei um <code>prefab</code> com apenas um texto para testar adicionar os itens carregados a partir do save game na interface. Estou armazenando o ID do item como string, e usando LINQ busco por este ID na lista de scriptable objects. </p>

<p>Eu recomendo dar uma olhada no <a href="https://github.com/cicanci/game-unity-ff/tree/2de5902000b812baeefe2d1ab6a34a257c86c339">código do jogo</a> no projeto para ver como isto foi implementado. Lembrando que este código é apenas um teste, e ainda será melhorado. Abaixo está o resultado de carregar os itens na interface, o próximo passo é carregar mais itens em cada slot e permitir alterar o item ativo.</p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/11/intenvario-itens.jpg" alt="Final Frontier: Upgrades e Save Game"></p>

<p><strong>Framework Frictioness</strong></p>

<p>O <a href="https://github.com/Claytonious/Frictionless">Frictioness</a> é um excelente framework para criar instâncias de classes como um serviço e enviar/receber mensagens. Por enquanto estou usando apenas o serviço <code>RegisterSingleton</code> para criar uma instância única da classe <code>DataManager</code>, mas em breve irei utilizar o serviço de <code>RouteMessage</code>.</p>

<p>Utilizar o Frictioness permite implementar uma maneira melhor de compartilhar instâncias e eventos pelo projeto do que referenciar ou passar objetos como parâmetros para classes static, como um singleton padrão. Nos próximos posts vou explicar mais sobre este framework e sua implementação quando adicionar mais coisas no projeto.</p>

<p><strong>Conclusão</strong></p>

<p>Se você olhar o <a href="https://github.com/cicanci/game-unity-ff">código</a> vai ver que tudo citado neste post requer um pouco mais trabalho do que parece, principalmente por eu ter desenvolvido tudo sem uma definição clara. Agora eu que estou começando a trabalhar mais no protótipo do jogo sinto a falta de ter pelo menos um <a href="https://github.com/cicanci/game-unity-ff/wiki/GDD">GDD</a> definindo algumas coisas básicas do jogo. </p>

<p>Outra coisa que me incomoda é o fato de eu ainda estar trabalhando na <a href="https://github.com/cicanci/game-unity-ff/projects/1">tarefa</a> de interface do inventário. Claro que não é um inventário simples, mas gostaria de terminar isso logo e voltar ao gameplay. Provavelmente no próximo post da série devo estar próximo de terminar a mecânica básica do inventário, e vou poder integrá-lo com o jogo.</p>

<p>O andamento do projeto pode ser conferido no <a href="https://github.com/cicanci/game-unity-ff">GitHub</a>, e neste <a href="https://github.com/cicanci/game-unity-ff/tree/2de5902000b812baeefe2d1ab6a34a257c86c339">link</a> você pode ver as alterações no projeto até este post. Todos os posts desta série sobre meu projeto podem ser vistos na tag <a href="http://gamedeveloper.com.br/tag/final-frontier/">Final Frontier</a>, e como sempre qualquer sugestão ou opinião é bem vinda!</p>]]></content:encoded></item><item><title><![CDATA[Revisão de código]]></title><description><![CDATA[<p>Esta é uma prática muito comum em empresas de médio e grande porte, mas na minha opinião poderia ser algo que muitas empresas pequenas deveriam tentar adicionar ao seu processo de desenvolvimento. Existem algumas maneiras formais de fazer revisão de código, mas neste post quero comentar da minha experiência em</p>]]></description><link>http://gamedeveloper.com.br/revisao-de-codigo/</link><guid isPermaLink="false">5255c6e4-a619-4711-a582-78cc8785b3fd</guid><category><![CDATA[game dev]]></category><dc:creator><![CDATA[Bruno Cicanci]]></dc:creator><pubDate>Sat, 19 Nov 2016 20:19:00 GMT</pubDate><media:content url="http://gamedeveloper.com.br/content/images/2016/11/code-revision-capa.jpg" medium="image"/><content:encoded><![CDATA[<img src="http://gamedeveloper.com.br/content/images/2016/11/code-revision-capa.jpg" alt="Revisão de código"><p>Esta é uma prática muito comum em empresas de médio e grande porte, mas na minha opinião poderia ser algo que muitas empresas pequenas deveriam tentar adicionar ao seu processo de desenvolvimento. Existem algumas maneiras formais de fazer revisão de código, mas neste post quero comentar da minha experiência em revisão de código. </p>

<p>Na primeira vez que conheci este processo na prática foi quando trabalhei na <a href="http://ea.com">Electronic Arts</a>. Em projetos que estão em desenvolvimento existe uma exigência muito grande por parte dos líderes de que todo código seja revisado antes de fazer o merge das alterações para o branch principal do projeto.</p>

<p>Para a revisão funcionar é necessário que a equipe trabalhe com o conceito de branches. Isto pode ser facilmente feito em ferramentas de versionamento como <a href="https://git-scm.com/">git</a> e <a href="https://www.perforce.com/">perforce</a> (este é o que a EA usa). Cada feature ou bug fix deve ser feita em um branch separado, e quando terminada o merge é feito para o branch principal de desenvolvimento. É neste ponto que a revisão de código acontece.</p>

<p>A revisão do código, sempre feita por outro programador que não trabalhou no branch, pode ser algo mais leve como só verificar se existe algo que pode ser melhorado ou algo mais exigente, como verificar se o código está escrito no padrão do projeto (nomes de variáveis e métodos, espaçamento, quebras de linha, entre outros). No início, para um programador novo na equipe, é normal que o código necessite alterações, mas com o tempo tudo fica mais natural. Caso o revisor aprove o código, ele pode ser mergeado no branch de desenvolvimento. Caso contrário, o revisor enviará uma lista de alterações e até sugestões para melhorar o código.</p>

<p>Um dos benefícios da revisão de código não é só garantir que os padrões de desenvolvimento do projeto estejam sendo seguidos, mas também ajuda a evitar que novos códigos sejam adicionados em lugares errados ou que algo que já exista seja escrito novamente. A revisão de código ensina o programador a ter mais cuidado com o código que está escrevendo.</p>

<p>É importante lembrar que a revisão do código não é um teste unitário e muito menos gerar uma build e testar. Os testes de código provavelmente serão executados no momento de gerar uma build para algum QA testar ou após o merge do código no branch de desenvolvimento. A revisão do código busca a qualidade do código escrito e o padrão de desenvolvimento do projeto.</p>

<p>Outro ponto para se lembrar é que a revisão de código só funciona se todos programadores da equipe tiverem o bom senso de seguir os padrões do projeto. Não adianta introduzir algo que não será seguido por que alguém acha que é besteira ou perda de tempo, e prefere escrever o código de qualquer jeito só para terminar suas tarefas antes do prazo. Escrever código com qualidade nunca é perda de tempo, e qualquer processo que possa garantir a qualidade do código é útil em projetos com muita gente trabalhando ao mesmo tempo. </p>

<p>Imagem da capa: <a href="http://www.shutterstock.com/pic-395220502/stock-photo-programmer-working-on-laptop-at-office-focus-on-programming-code.html">Programmer working</a> do Shutterstock.</p>]]></content:encoded></item><item><title><![CDATA[Final Frontier: Organizando tarefas]]></title><description><![CDATA[<p>No <a href="http://gamedeveloper.com.br/final-frontier-detalhes-do-inventario/">post anterior</a> sobre o projeto houve pouco progresso por que meus dias estavam corridos, porém estas duas últimas semana foram ainda mais corridas e não conseguir trabalhar projeto na Unity, porém conseguir pelo menos organizar as tarefas do projeto.</p>

<p><strong>Organizando a casa</strong></p>

<p>Quando comecei o projeto, há 4 meses</p>]]></description><link>http://gamedeveloper.com.br/final-frontier-organizando-tarefas/</link><guid isPermaLink="false">76134f4f-8887-4a35-8d47-3c53063835d5</guid><category><![CDATA[final frontier]]></category><dc:creator><![CDATA[Bruno Cicanci]]></dc:creator><pubDate>Sat, 05 Nov 2016 00:10:24 GMT</pubDate><media:content url="http://gamedeveloper.com.br/content/images/2016/11/github-project-capa.jpg" medium="image"/><content:encoded><![CDATA[<img src="http://gamedeveloper.com.br/content/images/2016/11/github-project-capa.jpg" alt="Final Frontier: Organizando tarefas"><p>No <a href="http://gamedeveloper.com.br/final-frontier-detalhes-do-inventario/">post anterior</a> sobre o projeto houve pouco progresso por que meus dias estavam corridos, porém estas duas últimas semana foram ainda mais corridas e não conseguir trabalhar projeto na Unity, porém conseguir pelo menos organizar as tarefas do projeto.</p>

<p><strong>Organizando a casa</strong></p>

<p>Quando comecei o projeto, há 4 meses atrás, estava pensando em criar um projeto no <a href="https://trello.com/">trello</a> para organizar as tarefas e deixar público o andamento do projeto em um board. Porém, mês passado o GitHub lançou um <a href="https://techcrunch.com/2016/09/14/github-gets-built-in-project-management-tools-and-support-for-reviews/">mini-trello</a> para organizar tarefas de um repositório. Apesar de ser limitado, é bem útil pois cada tarefa pode ser ligada com um issue e associado a um pull request.</p>

<p>Como o repositório está no GitHub e eu pretendo usar seus recursos, como a <a href="https://github.com/cicanci/game-unity-ff/wiki">Wiki</a> para o GDD, achei que faz sentido manter a organização de tarefas lá, assim fica tudo no mesmo lugar. Outra feature legal é que cada repositório pode ter vários projetos. Eu criei um projeto para o protótipo, depois posso criar um para bugs, releases, e qualquer outra coisa que fizer sentido.</p>

<p><strong>Mini Scrum</strong></p>

<p>Estou usando alguns conceitos de scrum, embora minha sprint seja indeterminada. No board criar as colunas de To Do (o que deve ser feito na sprint), Doing (o que está sendo feito) e Done (tudo que já foi feito em todas sprints do projeto). Adicionei também uma coluna chamada Backlog onde vou colocar tarefas que ainda não estão na sprint atual, mas um dia entrarão em alguma sprint. Por enquanto tem pouco coisa lá, mas agora que tenho um lugar para organizar o projeto mais tarefas irão surgir.</p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/11/github-project.jpg" alt="Final Frontier: Organizando tarefas"></p>

<p><a href="https://github.com/cicanci/game-unity-ff/projects/1?fullscreen=true">Neste link</a> você pode acompanhar o desenvolvimento do projeto. É um board básico simples, porém é o essencial para este momento do projeto. Assim ficará mais clara pra mim e para você aonde o projeto está indo, o que está sendo feito e o que será feito. Como sempre, qualquer sugestão é sempre bem vinda!</p>

<p><strong>Conclusão</strong></p>

<p>Semana que vem vou fazer um post sobre o que fez eu não conseguir trabalhar neste projeto nas últimas duas semanas. Espero que nas próximas duas semanas eu consiga trabalhar mais neste projeto, não vejo a hora de poder ter algo jogável para compartilhar aqui.</p>

<p>O andamento do projeto pode ser conferido no <a href="https://github.com/cicanci/game-unity-ff">GitHub</a>. Todos os posts desta série sobre meu projeto podem ser vistos na tag <a href="http://gamedeveloper.com.br/tag/final-frontier/">Final Frontier</a>, e como sempre qualquer sugestão ou opinião é bem vinda!</p>]]></content:encoded></item><item><title><![CDATA[Meu novo portfólio]]></title><description><![CDATA[<p>Uma das dicas que sempre falo para quem está começando é montar um portfólio pois, mesmo que no início tenha apenas jogos curtos ou projetos de cursos, é algo para mostrar e é um opcional praticamente obrigatório em um processo seletivo na área de jogos.</p>

<p>Existem algumas coisas importantes que</p>]]></description><link>http://gamedeveloper.com.br/meu-novo-portfolio/</link><guid isPermaLink="false">8c7d03a9-f7da-4fc4-be4c-5a086ed882ec</guid><category><![CDATA[meus projetos]]></category><dc:creator><![CDATA[Bruno Cicanci]]></dc:creator><pubDate>Thu, 27 Oct 2016 11:07:00 GMT</pubDate><media:content url="http://gamedeveloper.com.br/content/images/2016/10/oniro_1.png" medium="image"/><content:encoded><![CDATA[<img src="http://gamedeveloper.com.br/content/images/2016/10/oniro_1.png" alt="Meu novo portfólio"><p>Uma das dicas que sempre falo para quem está começando é montar um portfólio pois, mesmo que no início tenha apenas jogos curtos ou projetos de cursos, é algo para mostrar e é um opcional praticamente obrigatório em um processo seletivo na área de jogos.</p>

<p>Existem algumas coisas importantes que vale sempre lembrar. Se você é um programador, ninguém vai cobrar pela arte, design ou audio do seu jogo, mas vão cobrar (e perguntar) sobre as técnicas de programação, engine, linguagem, design patterns e qualquer outra coisa técnica que possa ser relevante ao jogo. </p>

<p>Até 2013 meu portfólio era uma categoria aqui no blog que listava os posts relacionados a meus projetos, porém isto não era muito prático para mostrar ou mesmo aplicar para vagas fora do país. Neste momento eu decidi separar o meu portfólio do blog e escrever o conteúdo dele em Inglês. </p>

<p>No início eu queria algo bem simples e fiz meu <a href="http://cicanci.com/old/2014/">portfólio de 2014</a> utilizando apenas <a href="http://getbootstrap.com/">bootstrap</a>. Meus projetos estavam lá, porém o layout estava bem ruim. Continuei utilizando apenas o bootstrap no meu <a href="http://cicanci.com/old/2015/">portfólio de 2015</a>, que acabou ficando inacabado por falta de tempo.</p>

<p>Porém, este ano, decidi refazer o portfólio mas queria ir um pouco mais além de apenas uma página estática. Decidi que queria hospedar o portfólio no <a href="https://pages.github.com/">GitHub Pages</a>, o mesmo lugar que está <a href="http://gamedeveloper.com.br/ola-ghost/">hospedado este blog</a>, porém não queria utilizar a combinação <a href="https://ghost.org/">Ghost</a> + <a href="https://github.com/axitkhurana/buster">Buster</a> para publicar. </p>

<p>Foi então que decidi utilizar o <a href="https://jekyllrb.com/">Jekyll</a>, um framework possui algumas features bem legal para criar blogs e sites, e o melhor é que o GitHub Pages suporta Jekyll nativamente. Inclusive estou pensando em refazer este blog utilizado Jekyll, mas isto é um projeto maior que exigem um certo planejamento para não quebrar algumas coisas.</p>

<p>Meu portfólio atual foi desenvolvido em poucos dias, utilizando meu tempo livre, e o resultado foi melhor do que o esperado. Você pode ver o projeto <a href="https://github.com/cicanci/cicanci.github.io">neste repositório</a> e o <a href="http://cicanci.com">portfólio aqui</a>. Além dos projetos profissionais, também adicionei meus projetos pessoais e jogos que desenvolvi em game jams. </p>

<p>Coloquei apenas os jogos que foram desenvolvidos até o fim e publicados no meu blog ou em algum site, junto com imagens, videos e informações. Eu demorei mais para juntar toda essa informação e recursos do que montar o portfólio, mas todo esforço valeu a pena e hoje estou feliz com o resultado. Com o tempo vou adicionar mais detalhes sobre cada projeto, mas a base está pronta. </p>

<p>Minha sugestão é fazer o portfólio em Inglês e em um lugar separado. Nem precisa ser no GitHub Pages, pois existem diversos outros serviços como o <a href="https://carbonmade.com/">Carbonmade</a> e o <a href="https://www.behance.net/">Behance</a>, ou você pode simplesmente colocar seus jogos em sites como <a href="http://gamejolt.com/">GameJolt</a> ou <a href="https://itch.io/">Itch.io</a>, mas lembre de colocar detalhes do que você fez no projeto. </p>

<p>Deixe um comentário aqui com sugestões para melhorar meu portfólio, e também o link do seu para eu poder ver! </p>]]></content:encoded></item><item><title><![CDATA[Final Frontier: Detalhes do Inventário]]></title><description><![CDATA[<p>No <a href="http://gamedeveloper.com.br/final-frontier-expandindo-o-inventario/">post anterior</a> fiz o inventário expandir quando o cursor estiver em cima de um slot. Desta vez comecei a adicionar alguns detalhes visuais, além de definir o que cada coluna da interface terá em relação a nave.</p>

<p><strong>Partes da nave</strong></p>

<p>A coluna da direita está dividida em cinto parte:</p>]]></description><link>http://gamedeveloper.com.br/final-frontier-detalhes-do-inventario/</link><guid isPermaLink="false">76baae3a-7a9e-478e-b548-cd6773d72860</guid><category><![CDATA[final frontier]]></category><dc:creator><![CDATA[Bruno Cicanci]]></dc:creator><pubDate>Thu, 20 Oct 2016 00:21:00 GMT</pubDate><media:content url="http://gamedeveloper.com.br/content/images/2016/10/nave-partes-ui-capa.jpg" medium="image"/><content:encoded><![CDATA[<img src="http://gamedeveloper.com.br/content/images/2016/10/nave-partes-ui-capa.jpg" alt="Final Frontier: Detalhes do Inventário"><p>No <a href="http://gamedeveloper.com.br/final-frontier-expandindo-o-inventario/">post anterior</a> fiz o inventário expandir quando o cursor estiver em cima de um slot. Desta vez comecei a adicionar alguns detalhes visuais, além de definir o que cada coluna da interface terá em relação a nave.</p>

<p><strong>Partes da nave</strong></p>

<p>A coluna da direita está dividida em cinto parte: asa esquerda, asa direita, frente, corpo e motor. Cada uma destas partes formarão a nave, possibilitando diversas combinações com diferentes pedaços. Isto também possibilitará a nave ter o mesmo conjunto ou ser totalmente sem padrão. As partes terão diferentes raridades e durabilidades, como uma armadura de um jogo de RPG. Ainda falta definir muitas coisas, mas quero que isto seja customizável e colecionável. </p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/10/nave-partes-ui.jpg" alt="Final Frontier: Detalhes do Inventário"></p>

<p><strong>Upgrades da nave</strong></p>

<p>Na coluna da esquerda estarão upgrades e armas que farão a nave ter um poder ofensivo maior, uma defesa maior, uma velocidade maior, entre outras coisas. As partes da nave irão influenciar, por exemplo uma nave com partes grandes será mais lenta do que uma nave com partes menores, e o upgrade de velocidade irá afetar ambas as naves de maneiras diferentes. Ainda não defini quais serão os upgrades, mas a ideia é que cada pedaço e upgrades afetarão o gameplay de uma maneira única (e balanceada, espero!).</p>

<p><strong>Próximos passos</strong></p>

<p>Este post foi mais curto do que os anteriores, não tive muito tempo livre para trabalhar neste projeto por causa de um outro jogo que estou desenvolvendo e uma outra novidade que vou contar em outro post mais pra frente. No próximo post espero ter finalizado o básico dos upgrades para poder integrar a tela de interface no jogo e continuar o desenvolvimento do gameplay.</p>

<p>O andamento do projeto pode ser conferido no <a href="https://github.com/cicanci/game-unity-ff">GitHub</a>, e neste <a href="https://github.com/cicanci/game-unity-ff/tree/d6b00065338a33fbdf1cd75843b111117fbbe05a">link</a> você pode ver as alterações no projeto até este post. Todos os posts desta série sobre meu projeto podem ser vistos na tag <a href="http://gamedeveloper.com.br/tag/final-frontier/">Final Frontier</a>, e como sempre qualquer sugestão ou opinião é bem vinda!</p>]]></content:encoded></item><item><title><![CDATA[Videos da GDC no YouTube]]></title><description><![CDATA[<p>A <a href="http://www.gdconf.com/">Game Developers Conference</a> (GDC) é bem famosa na indústria, e com certeza o maior evento para desenvolvedores de jogos. A GDC tem sua edição principal nos EUA e algumas edições um pouco menores na Europa e Asia, assim como edições especiais, como a VRDC. Todo conteúdo das palestras ficam</p>]]></description><link>http://gamedeveloper.com.br/videos-da-gdc-no-youtube/</link><guid isPermaLink="false">008a2389-236d-479e-a417-d3c00b436da0</guid><category><![CDATA[game dev]]></category><dc:creator><![CDATA[Bruno Cicanci]]></dc:creator><pubDate>Sat, 15 Oct 2016 19:22:00 GMT</pubDate><media:content url="http://gamedeveloper.com.br/content/images/2016/10/gdc.png" medium="image"/><content:encoded><![CDATA[<img src="http://gamedeveloper.com.br/content/images/2016/10/gdc.png" alt="Videos da GDC no YouTube"><p>A <a href="http://www.gdconf.com/">Game Developers Conference</a> (GDC) é bem famosa na indústria, e com certeza o maior evento para desenvolvedores de jogos. A GDC tem sua edição principal nos EUA e algumas edições um pouco menores na Europa e Asia, assim como edições especiais, como a VRDC. Todo conteúdo das palestras ficam disponíveis no site <a href="http://www.gdcvault.com/">GDC Vault</a>, que possui alguns conteúdos gratuitos mas sua maioria precisa de uma assinatura mensal para ter acesso.</p>

<p>Ano passado a GDC começou um <a href="https://www.youtube.com/channel/UC0JB7TSe49lg56u6qH8y_MQ/videos">canal no YouTube</a>, e a cada dia eles postam um video do seu conteúdo pago. Muitas vezes as palestras são curtas, ou até de alguns anos atrás, mas eles também postam videos recentes e longos. Vale muito a pena acompanhar este canal e assistir seus videos, muitas vezes são melhores do que aulas.</p>

<p>Os videos abaixo são alguns dos meus favoritos, recomendo assistir pois são verdadeiras aulas sobre desenvolvimento de jogos! </p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/E2MIpi8pIvY" frameborder="0" allowfullscreen></iframe>

<iframe width="560" height="315" src="https://www.youtube.com/embed/zp4NZ8i80QI" frameborder="0" allowfullscreen></iframe>

<iframe width="560" height="315" src="https://www.youtube.com/embed/pyjDMPTgxxk" frameborder="0" allowfullscreen></iframe>

<iframe width="560" height="315" src="https://www.youtube.com/embed/BYFvwbby2YM" frameborder="0" allowfullscreen></iframe>

<iframe width="560" height="315" src="https://www.youtube.com/embed/moW8-MXjivs" frameborder="0" allowfullscreen></iframe>

<p>Quais são seus favoritos?</p>]]></content:encoded></item><item><title><![CDATA[Final Frontier: Expandindo o Inventário]]></title><description><![CDATA[<p>No <a href="http://gamedeveloper.com.br/final-frontier-interface-da-nave/">post anterior</a> demonstrei como iniciei o desenvolvimento da interface do inventário da nave, baseado na interface do jogo Destiny. O inventário ainda não, e desta vez comecei a adicionar mais funções na interface. </p>

<p><strong>Melhorias no inventário</strong></p>

<p>Até o último post alguns itens na interface eram apenas uma imagem estática,</p>]]></description><link>http://gamedeveloper.com.br/final-frontier-expandindo-o-inventario/</link><guid isPermaLink="false">aaa4a2ec-a7f3-4930-807a-1428a25c3651</guid><category><![CDATA[final frontier]]></category><dc:creator><![CDATA[Bruno Cicanci]]></dc:creator><pubDate>Thu, 06 Oct 2016 00:07:37 GMT</pubDate><media:content url="http://gamedeveloper.com.br/content/images/2016/10/ff-ui-capa.png" medium="image"/><content:encoded><![CDATA[<img src="http://gamedeveloper.com.br/content/images/2016/10/ff-ui-capa.png" alt="Final Frontier: Expandindo o Inventário"><p>No <a href="http://gamedeveloper.com.br/final-frontier-interface-da-nave/">post anterior</a> demonstrei como iniciei o desenvolvimento da interface do inventário da nave, baseado na interface do jogo Destiny. O inventário ainda não, e desta vez comecei a adicionar mais funções na interface. </p>

<p><strong>Melhorias no inventário</strong></p>

<p>Até o último post alguns itens na interface eram apenas uma imagem estática, porém estes precisavam ser elementos de interface dinâmicos para serem modificados pelos itens colocados em cada slot. Por ser apenas um protótipo utilizei o slider da Unity para criar as barras de cada status, e no script que controla estes valores é possível modificá-los através do editor. Para exibir os controles abaixo basta adicionar <code>[Range(x, y)]</code> acima da declaração da variável, onde x é o valor mínimo e y o valor máximo, de acordo com o tipo da variável (int, float, etc).</p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/10/unity-editor-range.jpg" alt="Final Frontier: Expandindo o Inventário"></p>

<p>Modifiquei também o movimento da interface e da nave de acordo com o movimento do cursor. No post anterior coloquei um GIF mostrado como estava funcionando, e um durante a última semana achei que estava estranho. Modifiquei o movimento para ficar limitado a área do jogo (antes estava considerando mesmo o cursor fora do jogo), adicionei limites para a movimentação e deixei o movimento no geral mais suave. Este tipo de melhoria não faz sentido em um protótipo, porém estava atrapalhando o desenvolvimento do próximo item, que era expandir cada slot para mostrar as opções dele. Ah, também mudei o nome da nave para uma do jogo <a href="http://www.starrealms.com/">Star Realms</a>.</p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/10/ff-ui-1.jpg" alt="Final Frontier: Expandindo o Inventário"></p>

<p><strong>Expandindo cada slot</strong></p>

<p>Uma das features mais legais da interface do jogo Destiny é a expansão de cada slot revelando opções de armas ou armaduras para serem equipadas quando o cursor está em cima do item ativo. No caso do Destiny a solução é bem sofisticada, e inclusive possui um atrito que reduz o movimento do cursor quando ele passa por cima de um slot. No meu caso, quero algo simples e que funcione para alterar upgrades da nave no meu protótipo.</p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/10/ff-ui-expand-right.jpg" alt="Final Frontier: Expandindo o Inventário"></p>

<p>Utilizei os mesmos botões das colunas de slots, porém tive que reduzir seu tamanho para caber na tela. Criei um <code>Panel</code> como <code>Horizontal Layout Group</code> e adicionei três outros panels como <code>Vertical Layout Group</code>, contendo três botões em cada. O resultado é um conjunto com nove items em cada slot. </p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/10/ff-ui-expand-left.jpg" alt="Final Frontier: Expandindo o Inventário"></p>

<p>Esconder e exibir este panel no momento correto foi um pouco demorado, tive problemas utilizando <code>OnPointerExit</code> para esconder o panel, pois ele deveria ficar visível quando o cursor sair do panel mas está em cima do slot. A solução final ficou no script <code>TestItem</code>, onde na hora de esconder o panel eu verifico a direção do movimento e se ele está em cima do slot antes de esconder. Por ser um protótipo não tem problema, mas na versão final do jogo eu imagino que esta interface vai dar um bom trabalho para ficar do jeito que eu imagino.</p>

<p><strong>Algumas tools para o editor</strong></p>

<p>Esta semana no <a href="http://www.unity3d.com/learn/tutorials/topics/scripting/creating-basic-editor-tools">Live Training</a> da Unity (que acontece a cada duas semanas) o tema foi como criar ferramentas básicas para o editor da Unity. O video abaixo mostra como fazer algumas coisas básicas como converter <code>Texture2D</code> para <code>Sprite</code> dependendo do diretório que o arquivo for importado, selecionar objetos por <code>Tag</code> e criar objetos de maneira mais fácil e customizável. Recomendo assistir, adicionei as tools do vídeo no projeto para ajudar no desenvolvimento. </p>

<iframe width="640" height="360" src="https://www.youtube.com/embed/L24GKk1qQD4" frameborder="0" allowfullscreen></iframe>

<p><strong>Próximos passos</strong></p>

<p>Ainda existem muitas coisas para fazer na interface antes de voltar ao gameplay como: adicionar alguns upgrades nos slots, mudar o upgrade ativo e fazer os upgrades afetarem os status da nave (ataque, defesa, velocidade e carga). Depois disso volto a programar o gameplay e fazer estes status serem modificadores da nave durante o jogo. Também pretendo adicionar suporte ao controle do Xbox e Steam para mover o cursor, por enquanto apenas o mouse está funcionando. Além disso, preciso dar uma geral em alguns scripts que estão com código antigo comentado e alguns que nem estão sendo usados.</p>

<p>O andamento do projeto pode ser conferido no <a href="https://github.com/cicanci/game-unity-ff">GitHub</a>, e neste <a href="https://github.com/cicanci/game-unity-ff/tree/cef46194d21abebb813c3a1ba590fdced552031c">link</a> você pode ver as alterações no projeto até este post. Todos os posts desta série sobre meu projeto podem ser vistos na tag <a href="http://gamedeveloper.com.br/tag/final-frontier/">Final Frontier</a>, e como sempre qualquer sugestão ou opinião é bem vinda!</p>]]></content:encoded></item><item><title><![CDATA[Desenvolvendo Jogos Mobile com HTML5]]></title><description><![CDATA[<p>Neste livro, publicado pela <a href="https://novatec.com.br/livros/jogos-mobile-html5/">Editora Novatec</a>, o autor <a href="https://novatec.com.br/autores/luizfernandoestevarengo/">Luiz Fernando Estevarengo</a> ensina conceitos básicos de desenvolvimento de jogos para dispositivos móveis utilizando os frameworks <a href="http://phaser.io/">Phaser</a>, <a href="https://software.intel.com/en-us/intel-xdk">Intel XDK</a> e <a href="http://phonegap.com/">Cordova/Phonegap</a>.</p>

<p>O livro é bem direito ao ponto: explica como baixar e configurar os frameworks utilizados; explica o básico de HTML</p>]]></description><link>http://gamedeveloper.com.br/desenvolvendo-jogos-mobile-com-html5/</link><guid isPermaLink="false">eb67ba23-6808-4c89-8882-c22450df8964</guid><category><![CDATA[livros]]></category><dc:creator><![CDATA[Bruno Cicanci]]></dc:creator><pubDate>Wed, 28 Sep 2016 17:24:10 GMT</pubDate><media:content url="http://gamedeveloper.com.br/content/images/2016/09/capa-livro-html5.jpg" medium="image"/><content:encoded><![CDATA[<img src="http://gamedeveloper.com.br/content/images/2016/09/capa-livro-html5.jpg" alt="Desenvolvendo Jogos Mobile com HTML5"><p>Neste livro, publicado pela <a href="https://novatec.com.br/livros/jogos-mobile-html5/">Editora Novatec</a>, o autor <a href="https://novatec.com.br/autores/luizfernandoestevarengo/">Luiz Fernando Estevarengo</a> ensina conceitos básicos de desenvolvimento de jogos para dispositivos móveis utilizando os frameworks <a href="http://phaser.io/">Phaser</a>, <a href="https://software.intel.com/en-us/intel-xdk">Intel XDK</a> e <a href="http://phonegap.com/">Cordova/Phonegap</a>.</p>

<p>O livro é bem direito ao ponto: explica como baixar e configurar os frameworks utilizados; explica o básico de HTML e CSS; apresenta um bom resumo sobre JavaScript; desenvolve três jogos diferentes (Frogger, Plataforma e Top Down); explica como publicar o jogo nas lojas Google Play, App Store e Windows Store. Esta organização dividiu muito bem o livro e o torna fácil de consultar a procura de alguma informação, e torna a leitura bem prática.</p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/09/livro-html5.jpg" alt="Desenvolvendo Jogos Mobile com HTML5"></p>

<p>Os exemplos de jogos escolhidos foram ótimos. No primeiro jogo desenvolvido, similar ao Frogger, muitos conceitos básicos são ensinados para que o leitor possa desenvolver o jogo. Não é uma explicação teórica e profunda, mas é o básico para entender como funciona o game loop e máquinas de estado, por exemplo. O segundo jogo é de plataforma, similar ao Super Mario Bros, e parte do princípio que o leitor entendeu bem os conceitos do capítulo anterior e introduz novidades (por isso é importante fazer o projeto junto, para não ter dúvidas no próximo capítulo). O terceiro e último jogo é um top down, similar a um Zelda ou Final Fantasy do SNES, mais conceitos são apresentados para a conclusão deste projeto.</p>

<p>Pelos capítulos são apresentados o básico de detecção de colisão, som, utilização de sprites, animações, inputs, e outras coisas básicas para começar a desenvolver um jogo. Com certeza ao final do livro (se o leitor fizer os projetos) é possível ter uma boa noção para começar o seu próprio projeto e aprender mais sobre desenvolvimento de jogos. No final do livro tem um bom resumo de como exportar e publicar seu jogo nas principais lojas de aplicativos e jogos mobile.</p>

<p>Este livro é ótimo para quem tem noção de HTML/CSS/JavaScript e quer começar a desenvolver jogos. Mesmo quem não tem noção nenhuma de programação, e está disposta a aprender, vai gostar de ler este livro. Porém, se você já tem um conhecimento de programação, ou mesmo desenvolvimento de jogos, este livro pode ser básico demais. O código fonte dos projetos estão no <a href="https://github.com/zendrael/mobile_html5_games_phaser_xdk">GitHub</a> do autor.</p>

<p>Na minha opinião sobre a tecnologia, HTML5 não serve para fazer jogos mobile, como <a href="http://gamedeveloper.com.br/html5-nao-serve-para-fazer-jogos-mobile/">expliquei neste post</a>. É uma ótima tecnologia para aprender e fazer os primeiros jogos, mas projetos maiores serão melhores atendidos por tecnologias como <a href="https://unity3d.com/pt/">Unity</a> ou <a href="https://www.unrealengine.com/">Unreal</a>, entre outras. Não é uma crítica ao livro (que é muito bom para iniciantes), mas sim a tecnologia que é limitada para dispositivos móveis. </p>

<p>Muito obrigado a <a href="http://novatec.com.br">Editora Novatec</a> por me enviar este livro para fazer esta review. Você pode comprar <a href="http://novatec.com.br/livros/jogos-mobile-html5/">este livro</a> e <a href="http://novatec.com.br/lista.php?id=14">outros sobre desenvolvimento de jogos</a> no site da Novatec, e utilize o código GAMEDEVELOPER para ter desconto na compra!</p>]]></content:encoded></item><item><title><![CDATA[Final Frontier: Interface do inventário]]></title><description><![CDATA[<p>Os <a href="http://gamedeveloper.com.br/tag/final-frontier/">últimos posts</a> foram sobre o desenvolvimento da mecânica do jogo, que por enquanto é apenas uma nave atirando em caixas que explodem. Este mês coloquei o gameplay um pouco de lado para trabalhar na interface de usuário (UI) do jogo, e comecei pela principal tela: upgrade e informações sobre</p>]]></description><link>http://gamedeveloper.com.br/final-frontier-interface-da-nave/</link><guid isPermaLink="false">b559c4c1-90ba-4f99-9b55-ef9c46bc7108</guid><category><![CDATA[final frontier]]></category><dc:creator><![CDATA[Bruno Cicanci]]></dc:creator><pubDate>Wed, 21 Sep 2016 20:35:03 GMT</pubDate><media:content url="http://gamedeveloper.com.br/content/images/2016/09/ff-ui-capa.jpg" medium="image"/><content:encoded><![CDATA[<img src="http://gamedeveloper.com.br/content/images/2016/09/ff-ui-capa.jpg" alt="Final Frontier: Interface do inventário"><p>Os <a href="http://gamedeveloper.com.br/tag/final-frontier/">últimos posts</a> foram sobre o desenvolvimento da mecânica do jogo, que por enquanto é apenas uma nave atirando em caixas que explodem. Este mês coloquei o gameplay um pouco de lado para trabalhar na interface de usuário (UI) do jogo, e comecei pela principal tela: upgrade e informações sobre a nave.</p>

<p>Quando eu penso na interface para gerenciar os upgrades da nave, na hora me vem na cabeça a interface do jogo <a href="https://www.destinythegame.com">Destiny</a>. A ideia de usar um cursor para controlar a tela em um jogo de console foi bem arriscada, mas deu muito certo, e o melhor de tudo é que funcionaria bem em desktops. No caso de dispositivos móveis, basta remover o cursor e usar touch e drag para realizar as mesmas ações.</p>

<p><strong>Inspiração para a interface</strong></p>

<p>Toda semana procuro assistir alguns videos de palestras no canal da <a href="https://www.youtube.com/channel/UC0JB7TSe49lg56u6qH8y_MQ">GDC no YouTube</a>, e há algum tempo assisti o video abaixo, onde o designer de interface do Destiny conta como foi o processo para chegar no resultado que vemos hoje no jogo. Isto sem dúvidas me inspirou a começar a trabalhar na UI do meu jogo.</p>

<iframe width="640" height="360" src="https://www.youtube.com/embed/zp4NZ8i80QI" frameborder="0" allowfullscreen></iframe>

<p>A interface do jogo <a href="http://www.no-mans-sky.com/">No Man's Sky</a> também é interessante para o que eu quero fazer, e muito similar a interface do Destiny em alguns aspectos, mas acredito que para o meu jogo não iria funcionar. Gosto da ideia de carregar alguns upgrades separados por tipo e selecionar um para ser o ativo para aquele determinado tipo, como o Destiny faz. </p>

<p>Há duas semanas a Unity lançou o video abaixo sobre criação de menus na Unity, que é algo que eu já sabia mas assisti mesmo assim por que sempre acabo aprendendo algo novo. Graças ao video descobri um novo pacote gratuito na asset store da Unity, o <a href="https://www.assetstore.unity3d.com/en/#!/content/25468">Unity Samples: UI</a>, que tem artes com estilo futurista para UI e combinam muito bem com a ideia do jogo. </p>

<iframe width="640" height="360" src="https://www.youtube.com/embed/OWtQnZsSdEU" frameborder="0" allowfullscreen></iframe>

<p><strong>Criando a interface</strong></p>

<p>Para não bagunçar a scene que estou usando para criar e testar o gameplay, criei uma nova scene chamada PlaygroundUI, onde comecei a trabalhar na UI para o gerenciamento de upgrades da nave. Antes de começar a criar a UI na Unity montei a imagem abaixo no Photoshop, pra ter uma noção de como ficaria antes de começar a montar direto na game engine.</p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/09/ff-ui-test.jpg" alt="Final Frontier: Interface do inventário"></p>

<p>Importei esta imagem na Unity e comecei a montar a UI por cima dela. Esta é uma boa dica para posicionar os elementos de uma nova UI sem perder muito tempo arrastando ou calculado sua localização. É como copiar um desenho com uma outra folha por cima, facilita bastante o trabalho. Utilizei os botões do asset que baixei e deixei com a cor branca transparente para os slots de upgrade, e adicionei umas labels para o textos. Apenas os status abaixo da nave permaneceram uma imagem por enquanto. O resultado na Unity está na imagem abaixo.</p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/09/ff-ui-temp.jpg" alt="Final Frontier: Interface do inventário"></p>

<p>Com a UI pronta adicionei o modelo da nave e posicionei de uma maneira semelhante ao personagem no jogo Destiny, e coloquei um planeta bem grande atrás. Fiz um script simples para fazer o planeta girar lentamente e adicionei umas partículas do mesmo asset da UI, foram coisas simples mas que deixam o protótipo com uma cara ainda melhor. </p>

<p><strong>Movimentando a interface</strong></p>

<p>Por fim, comecei a fazer a UI se mover de acordo com a direção do cursor (também igual ao Destiny). A ideia era fazer a UI seguir a direção do cursor, porém fazer  a nave ir na direção oposta. Ainda não terminei, preciso encontrar os melhores valores para a movimentação, mas no git abaixo é possível ver um pouco de como está ficando. </p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/09/ff-ui-animation.gif" alt="Final Frontier: Interface do inventário"></p>

<p>Me desculpe pelo gif horrível, é a primeira vez que tento exportar um video em gif e ficou maior do que eu esperava (3MB). Segui este <a href="https://gist.github.com/dergachev/4627207">tutorial</a>, mas se alguém tiver uma sugestão de tool ou outra maneira de fazer isso deixe um comentário no post.</p>

<p>Para o movimento fiz um script chamado <code>TestInventory</code> que serve para ambos <code>GameObject</code> e <code>UI</code>, pois cada um tem um componente diferente para controlar o movimento, <code>Transform</code> e <code>RectTransform</code>, respectivamente. Pelo script é possível configurar o tipo do objeto, velocidade horizontal e vertical, e se o objeto deve ir para o sentido normal ou oposto ao cursor. </p>

<p>Para a movimentação utilizei <code>Translate</code> através de uma <a href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.StartCoroutine.html">Coroutine</a> quando o mouse se movimenta pela tela. Também é possível fazer a movimentação com <code>Lerp</code>, mas optei para usar o <code>Translate</code> no protótipo. </p>

<p><strong>Próximos Passos</strong></p>

<p>Acho que foi um bom início para a UI do inventário, pelo menos tenho uma ideia melhor de qual caminho seguir. A interface do Destiny é uma boa base para o meu jogo, mas é claro que ao longo do desenvolvimento vou modificar para ficar de acordo com meu jogo. Os próximos posts provavelmente serão sobre a UI, devo adicionar mais interação com o usuário e customizações nos slots. Quando estiver com o mínimo de recursos que eu preciso, vou adicioná-la na scene do jogo. Como podem ver na minha segunda lista de tarefas abaixo, agora a prioridade é a UI do jogo.</p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/09/ff-task-list-2.jpg" alt="Final Frontier: Interface do inventário"></p>

<p>O andamento do projeto pode ser conferido no <a href="https://github.com/cicanci/game-unity-ff">GitHub</a>, e neste <a href="https://github.com/cicanci/game-unity-ff/tree/8ae4b2b4c3ff79095ef98dca22612450c1c9b870">link</a> você pode ver as alterações no projeto até este post. Todos os posts desta série sobre meu projeto podem ser vistos na tag <a href="http://gamedeveloper.com.br/tag/final-frontier/">Final Frontier</a>, e como sempre qualquer sugestão ou opinião é bem vinda!</p>]]></content:encoded></item><item><title><![CDATA[Por que temos que jogar jogos diferentes]]></title><description><![CDATA[<p>Isto é algo que já escrevi <a href="http://gamedeveloper.com.br/jogue-bastante-mas-jogos-diferentes/">aqui no blog</a>, mas recentemente percebi que eu não estava fazendo. Ultimamente tenho jogado sempre os mesmos jogos, e isto ficou refletido nos últimos jogos que fiz participando do <a href="http://gamedeveloper.com.br/tag/ludum-dare/">Ludum Dare</a>.</p>

<p>Desde o ano passado comecei a jogar muitos jogos de tabuleiro novos pra</p>]]></description><link>http://gamedeveloper.com.br/por-que-jogar-jogos-diferentes/</link><guid isPermaLink="false">4f171d19-6868-4d26-a9ba-53bb24a0a9ac</guid><category><![CDATA[game dev]]></category><dc:creator><![CDATA[Bruno Cicanci]]></dc:creator><pubDate>Wed, 14 Sep 2016 15:09:26 GMT</pubDate><media:content url="http://gamedeveloper.com.br/content/images/2016/09/jogue-capa.jpg" medium="image"/><content:encoded><![CDATA[<img src="http://gamedeveloper.com.br/content/images/2016/09/jogue-capa.jpg" alt="Por que temos que jogar jogos diferentes"><p>Isto é algo que já escrevi <a href="http://gamedeveloper.com.br/jogue-bastante-mas-jogos-diferentes/">aqui no blog</a>, mas recentemente percebi que eu não estava fazendo. Ultimamente tenho jogado sempre os mesmos jogos, e isto ficou refletido nos últimos jogos que fiz participando do <a href="http://gamedeveloper.com.br/tag/ludum-dare/">Ludum Dare</a>.</p>

<p>Desde o ano passado comecei a jogar muitos jogos de tabuleiro novos pra mim, principalmente pelo rápido crescimento deste mercado no Brasil. Há alguns anos existiam poucos jogos e poucas empresas publicando por aqui, mas atualmente temos centenas de jogos disponíveis para todos os gostos, e muito mais está por vir. Por jogar com mais frequência jogos de tabuleiro do que jogos digitais, acabei lendo e pesquisando mais sobre eles, o que fez meu pensamento ficar limitado a mecânicas de jogos analógicos quando precisei criar algo digital.</p>

<p>Dos 5 jogos que fiz nos últimos <a href="http://gamedeveloper.com.br/tag/ludum-dare/">Ludum Dares</a>, 3 deles são claramente mecânicas de jogos analógicos, e eu não tinha percebido isto até o quinto jogo. Embora eu tenha jogado jogos de tabuleiro diferentes, muitos compartilham as mesmas mecânicas ou temas. No <a href="http://gamedeveloper.com.br/ludum-dare-35/">quarto jogo</a> que fiz comecei a perceber que estava faltando algo no game design, mas não era apenas isso, minha visão estava limitada a jogos analógicos. Tentei mudar no <a href="http://gamedeveloper.com.br/ludum-dare-36/">último jogo</a>, mas meus recursos de game design foram limitados pelas minhas experiências recentes em jogos de tabuleiro. </p>

<p>É engraçado que até neste outro jogo que estou desenvolvendo e postando aqui, o <a href="http://gamedeveloper.com.br/tag/final-frontier/">Final Frontier</a>, minhas referências iniciais também são <a href="http://gamedeveloper.com.br/inicio-do-projeto-final-frontier/">alguns jogos de tabuleiro</a>. Felizmente percebi que estava com esse pensando de mecânicas analógicas e decidi fazer algumas coisas diferentes para mudar, principalmente voltar a jogar jogos digitais. Mas, como já escrevi <a href="http://gamedeveloper.com.br/jogue-bastante-mas-jogos-diferentes/">neste post</a>, não adianta ficar jogando sempre as mesmas coisas. </p>

<p>Durante este ano inteiro eu joguei apenas 3 jogos diferentes por um tempo considerável: Destiny, Overwatch e No Man's Sky. Não adianta eu voltar a jogar os mesmos jogos se quero começar a pensar em mecânicas diferentes, por isso listei abaixo o que estou fazendo para mudar isso e voltar a pensar em mecânicas de jogos digitais para jogos digitais. Os itens se resumem a jogar jogos, porém de uma maneira que sejam diferentes e fora da zone de conforto (e sem gastar comprando vários jogos).</p>

<ul>
<li><p><a href="http://store.steampowered.com/genre/Free%20to%20Play/?tab=MostPlayedNewReleases">Jogos gratuitos no Steam</a> - eu recomendo ir na lista de lançamentos populares ao invés de ir na lista de jogos mais populares, assim você tem jogos novos, gratuitos e diferentes para jogar</p></li>
<li><p><a href="http://gamejolt.com/">Jogos gratuitos no Game Jolt</a> - este site é ótimo para publicar jogos (<a href="http://gamejolt.com/@cicanci/games">aqui estão alguns meus</a>) e também descobrir alguns jogos indie, jogue os destaques da página inicial</p></li>
<li><p><a href="https://www.humblebundle.com">Humble Bundle</a> - por $1 dólar é possível comprar um bundle de jogos (aproveite para comprar o <a href="https://www.humblebundle.com/gamemaker-bundle">GameMaker</a> esta semana lá), geralmente com jogos indie</p></li>
<li><p>Se você assina a <a href="https://www.playstation.com/en-us/explore/playstation-plus/">PSN Plus</a> ou <a href="http://www.xbox.com/pt-BR/live/games-with-gold">Xbox Live Gold</a>, todo mês tem alguns jogos grátis para jogar - eu sempre ignorava os jogos da PSN por não ser algo que eu jogaria, mas agora estou baixando e jogando.</p></li>
<li><p>Por fim, jogos gratuitos no <a href="https://play.google.com/store/apps/category/GAME">Google Play</a> e <a href="https://itunes.apple.com/us/genre/ios-games/id6014?mt=8">App Store</a> - se você já jogou os mais baixados, tente procurar por sugestões ou lançamentos.</p></li>
</ul>

<p>Esta lista acima para mais com "onde baixar jogos gratuitos" do que uma lista de estudo, mas tudo depende de como você encara isto. Minha recomendação é jogar algo novo toda semana, ou mesmo todo dia se possível, por pelo menos 1 hora e fazer anotações sobre o jogo: o que é legal, o que não é legal, quais são as mecânicas utilizadas, o que poderia ser diferente. Isto é um ótimo exercício de game design, e vai te ajudar na hora de fazer jogos. Isto é algo que eu fazia com frequência, mas aos poucos fui deixando de lado, e meus últimos jogos no Ludum Dare me mostraram as consequências de jogar sempre as mesmas coisas.</p>

<p>Jogar é muito importante para um desenvolvedor de jogos, assim como um cineasta assiste diversos filmes. Jogos também são uma forma artística de expressão, por isso é essencial sempre conhecer jogos novos (de indies a AAA) e jogá-los para se manter criativo. Espero que eu consiga mostrar estas mudanças no desenvolvimento do <a href="http://gamedeveloper.com.br/tag/final-frontier/">Final Frontier</a> e no próximo <a href="http://ludumdare.com/compo/">Ludum Dare</a> em Dezembro.</p>

<p>Imagem da capa: <a href="http://www.shutterstock.com/pic-256858681/stock-vector-vector-flat-game-illustration.html?src=cnEg0puofKboBm-G1frOdA-1-40">Vector Flat Game Illustration</a> do Shutterstock.</p>]]></content:encoded></item><item><title><![CDATA[Final Frontier: Raycast, Spawn e MoSCoW]]></title><description><![CDATA[<p>Faz um mês desde o <a href="http://gamedeveloper.com.br/final-frontier-camera-e-controle/">último post</a> sobre o andamento deste projeto, mas ele não está parado. Mês passado teve o <a href="http://gamedeveloper.com.br/ludum-dare-36/">Ludum Dare #36</a> e realizei uma <a href="http://gamedeveloper.com.br/game-jams-como-fazer-um-jogo-em-48h/">palestra na USP sobre Game Jams</a>, então meu tempo livre (e os posts do blog) foram voltados a estes eventos. Agora que tudo</p>]]></description><link>http://gamedeveloper.com.br/final-frontier-raycast-e-spawn/</link><guid isPermaLink="false">1c7fbadf-739f-4538-99b6-4a882243048b</guid><category><![CDATA[final frontier]]></category><dc:creator><![CDATA[Bruno Cicanci]]></dc:creator><pubDate>Thu, 08 Sep 2016 15:07:00 GMT</pubDate><media:content url="http://gamedeveloper.com.br/content/images/2016/09/ff-capa-shoot.jpg" medium="image"/><content:encoded><![CDATA[<img src="http://gamedeveloper.com.br/content/images/2016/09/ff-capa-shoot.jpg" alt="Final Frontier: Raycast, Spawn e MoSCoW"><p>Faz um mês desde o <a href="http://gamedeveloper.com.br/final-frontier-camera-e-controle/">último post</a> sobre o andamento deste projeto, mas ele não está parado. Mês passado teve o <a href="http://gamedeveloper.com.br/ludum-dare-36/">Ludum Dare #36</a> e realizei uma <a href="http://gamedeveloper.com.br/game-jams-como-fazer-um-jogo-em-48h/">palestra na USP sobre Game Jams</a>, então meu tempo livre (e os posts do blog) foram voltados a estes eventos. Agora que tudo passou, vamos voltar ao <a href="http://gamedeveloper.com.br/tag/final-frontier/">Final Frontier</a>.</p>

<p>Desta vez vou falar sobre a substituição da colisão de objetos do tiro por Raycast, uma classe para fazer Spawn de objetos usando o design pattern Prototype e o início da organização das tarefas do projeto usando o método MoSCoW.</p>

<p><strong>Substituindo colisão do tiro por Raycast</strong></p>

<p>No último post sobre o andamento do jogo eu mencionei que iria adicionar uma mira no centro da tela para o jogador ter uma noção melhor de onde está atirando. Eu adicionei, porém o tiro ficou estranho. Como a nave está em constante movimento, o tiro (que é uma bola) estava indo bem fora da mira se a nave estivesse virando. Geralmente no início do projeto do protótipo não devemos perder tempo em melhorias, mas neste caso faria toda diferença ter um tiro mais consistente. </p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/09/ff-shoot-1-1.jpg" alt="Final Frontier: Raycast, Spawn e MoSCoW"></p>

<p>Por isso decidi implementar a técnica de <a href="https://unity3d.com/pt/learn/tutorials/topics/physics/raycasting">Raycast</a> para determinar se hoje a colisão com o objeto (então explodi-lo). A Unity tem bastante coisa implementada para auxiliar no uso do Raycast, então não é algo complicado de implementar, apenas leva um tempo para ajustar. Para desenhar a linha do tiro, que seria como um laser, pesquisei como fazer e encontrei <a href="https://unity3d.com/pt/learn/tutorials/lets-try/shooting-with-raycasts">este excelente tutorial da Unity</a> (video abaixo) que cobre também como fazer o Raycast. </p>

<iframe width="640" height="360" src="https://www.youtube.com/embed/AGd16aspnPA" frameborder="0" allowfullscreen></iframe>

<p>O resultado final ficou muito melhor do que o tiro com as bolinhas. Não é algo final, talvez eu mude isto mesmo durante o protótipo, mas agora está mais consistente para eu poder continuar desenvolvendo o jogo, principalmente para adicionar novos objetos para serem destruídos. O video abaixo também é uma ótima referencia para o uso de Raycast na Unity.</p>

<iframe width="640" height="360" src="https://www.youtube.com/embed/mpxim8YbsMk" frameborder="0" allowfullscreen></iframe>

<p><strong>Spawner de objetos com prototype</strong></p>

<p>Agora que o tiro está bem melhor, decidi adicionar mais objetos para o jogador atirar. Por enquanto ainda estou utilizando a mesma caixa do início do projeto, porém criei um spawn aleatório. No momento limitei para gerar 10 grupos contendo 4 caixas (2x2) ao redor da nave, em qualquer direção. Antes estava usando um grupo de 9 caixas (3x3) e o frame rate caia demais na explosão, e por ser apenas um teste não vale a pena perder tempo nisso agora, então reduzi para menos caixas (que depois vai ser um asteroide ou algum outro objeto no espaço).</p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/09/ff-shoot-2-1.jpg" alt="Final Frontier: Raycast, Spawn e MoSCoW"></p>

<p>O spawn de objetos é algo muito simples de fazer utilizando o design pattern <a href="http://gameprogrammingpatterns.com/prototype.html">Prototype</a>, principalmente na Unity onde o protótipo é um prefab. Utilizei o mesmo conceito em alguns jogos que fiz usando Unity em dois <a href="http://gamedeveloper.com.br/tag/ludum-dare/">Ludum Dare</a>, então copiei o código de lá e adicionei ao projeto. </p>

<p>Reaproveitar código de outros projetos, mesmo classes pequenas como esta que utilizei, ajudam a ganhar tempo por dois motivos: não perder tempo escrevendo o código e não perder tempo testando o código. É sempre bom ter alguns códigos prontos e, de preferência, escritos para serem reaproveitados em diferentes projetos. Algo ainda mais sofisticado seria criar módulos ou plugins (no caso da Unity), muitas empresas fazem isto para reaproveitar códigos que podem estar em qualquer projeto. Por isso, sempre é bom seguir o princípio <a href="http://gamedeveloper.com.br/mantenha-tudo-simples/">K.I.S.S.</a></p>

<p><strong>Método MoSCoW</strong></p>

<p>Antes de pensar em fazer um <a href="http://gamedeveloper.com.br/game-design-document/">GDD</a>, é legal listar algumas ideias do que será o jogo. Eu fiz uma longa lista de features que gostaria de colocar no jogo, isto não significa que estão na versão final mas serão testadas durante a fase de prototipagem. Esta lista, que podemos chamar de backlog, contém diversas tarefas que podem ser <a href="http://gamedeveloper.com.br/definicao-de-prioridade-de-tarefas/">divididas em partes menores</a>. É o mesmo conceito de definir as tarefas de uma sprint no <a href="http://gamedeveloper.com.br/aprenda-o-que-e-scrum/">Scrum</a>.</p>

<p>Mais tarde vou começar a criar o GDD na <a href="https://github.com/cicanci/game-unity-ff/wiki">Wiki do projeto no GitHub</a>, além de fazer um controle das tarefas utilizando <a href="https://trello.com/">Trello</a>. Mas, por enquanto, vou utilizar papel e caneta, e um método chamado <a href="https://en.wikipedia.org/wiki/MoSCoW_method">MoSCoW</a>. Este método consiste em classificar as features ou tarefas em 4 tipos:</p>

<ul>
<li>Must have: importante e obrigatório</li>
<li>Should have: importante, mas não necessário</li>
<li>Could have: desejável, mas não importante</li>
<li>Won't have: importante NÃO ter</li>
</ul>

<p>Isto é algo bem simples que ajuda a organizar a prioridade de tarefas, mas sem burocracias ou dependência de uma ferramenta específica. Apenas anote os itens em casa uma das classificações e pronto, ai está sua lista de tarefas organizada. A ideia do "Won't have" é que não se deve perder tempo com as tarefas nesta classificação. Um exemplo disso seriam tarefas relacionadas a melhorias e polimentos não necessários em um protótipo.</p>

<p>Abaixo está a lista que montei para esta primeira parte do projeto desde seu início, e o número #01 indica que é a primeira lista. "Nice to have" e "Good to have" equivalem a "Should have" e "Could have", respectivamente, e não tem o "Won't have". Aprendi a separar as tarefas desta maneira com um produtor quando trabalhava na EA, sem saber que isto se chamava MoSCoW (e que tinha o Won't have).</p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/09/ff-tasks-01.jpg" alt="Final Frontier: Raycast, Spawn e MoSCoW"></p>

<p>No verso desta folha adicionei uma lista chamada "Backlog" para listar ideias que tive durante o desenvolvimento das tarefas, assim posso planejar a próxima lista considerando estas ideas como possíveis tarefas. </p>

<p><strong>Próximos Passos</strong></p>

<p>Agora que o tiro está bem melhor, e com uma mira para auxiliar sua direção, o próximo passo vai ser melhorar um pouco o movimento da nave, pois ela está saindo da tela com frequência e ficando em uma posição errada quando volta. É um detalhe que precisa ser arrumado antes de começar a pensar em adicionar features como inimigos ao protótipo. Outra coisa que quero fazer é uma interação com o planeja que está no cenário, fazendo aparecer um tela quando o jogador se aproximar do planeja e exibindo algumas ações disponíveis.</p>

<p>O andamento do projeto pode ser conferido no <a href="https://github.com/cicanci/game-unity-ff">GitHub</a> e neste <a href="https://github.com/cicanci/game-unity-ff/tree/bfd1d40aead023b34f4d908fbe034eb25101c532">link</a> você pode ver as alterações no projeto até este post. Todos os posts desta série sobre meu projeto podem ser vistos na tag <a href="http://gamedeveloper.com.br/tag/final-frontier/">Final Frontier</a>, e como sempre qualquer sugestão ou opinião é bem vinda!</p>]]></content:encoded></item><item><title><![CDATA[Minha participação no Ludum Dare #36]]></title><description><![CDATA[<p>Pela quinta vez consecutiva participei do <a href="http://ludumdare.com/compo/ludum-dare-36/?action=preview&amp;uid=52021">Ludum Dare</a> na competição de fazer um jogo sozinho em 48 horas. Desta vez o tema era Ancient Technology (tecnologia antiga) e depois de descartar ideias relacionadas ao Egito e Idade da Pedra (que eram meio obvias para o tema), acabei lembrando de um</p>]]></description><link>http://gamedeveloper.com.br/ludum-dare-36/</link><guid isPermaLink="false">1c376776-d268-4bb2-9b67-16342b15b25a</guid><category><![CDATA[meus projetos]]></category><category><![CDATA[ludum dare]]></category><dc:creator><![CDATA[Bruno Cicanci]]></dc:creator><pubDate>Tue, 30 Aug 2016 03:29:27 GMT</pubDate><media:content url="http://gamedeveloper.com.br/content/images/2016/08/sunstone-3.jpg" medium="image"/><content:encoded><![CDATA[<img src="http://gamedeveloper.com.br/content/images/2016/08/sunstone-3.jpg" alt="Minha participação no Ludum Dare #36"><p>Pela quinta vez consecutiva participei do <a href="http://ludumdare.com/compo/ludum-dare-36/?action=preview&amp;uid=52021">Ludum Dare</a> na competição de fazer um jogo sozinho em 48 horas. Desta vez o tema era Ancient Technology (tecnologia antiga) e depois de descartar ideias relacionadas ao Egito e Idade da Pedra (que eram meio obvias para o tema), acabei lembrando de um episódio da série <a href="http://www.imdb.com/title/tt2306299/">Vikings</a> onde eles usavam uma pedra para achar o sol em dias nublados, e meu jogo foi baseado nisso.</p>

<p>Antes de iniciar fiz uma pequena pesquisa para a entender como esta pedra conhecida como <a href="https://en.wikipedia.org/wiki/Sunstone">Sunstone</a> era utilizada. Parece que não é certo que foram utilizadas historicamente, porém existem evidências que foram encontradas em navios naufragados e a região mais comum de encontrá-la é na Islândia, um lugar bem conhecido pelos Vikings. O video abaixo é um dos melhores que encontrei que explica um pouco sobre este assunto.</p>

<iframe width="640" height="360" src="https://www.youtube.com/embed/CXu8hozezOY" frameborder="0" allowfullscreen></iframe>

<p><strong>Game Design</strong></p>

<p>Desta vez foi a maior prioridade do meu projeto, pensar bem no game design do jogo. Depois de ficar duas horas pensando no tema e chegando na conclusão acima, fiquei mais umas 2 ou 3 horas pensando na jogabilidade. Pensei em bastante coisa para este jogo, e achei que daria para fazer tudo, mas infelizmente não deu para fazer tudo.</p>

<p>A mecânica base do jogo é você encontrar o sol movendo a Sunstone pela tela. Quando os dois pontos ficam pretos na mesma intensidade (conforme imagem abaixo), lá é onde o sol está. Além desta informação o jogo fala a posição do sol: nascendo ou se pondo. Com estas duas informações é possível encontrar a direção em que você está navegando, e é assim que se acredita que Vikings navegaram antes da invenção do compasso.</p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/08/sunstone-2.jpg" alt="Minha participação no Ludum Dare #36"></p>

<p>O jogo te dá um objetivo: ir para uma direção e uma determinada distancia do centro do mapa, que é a posição inicial do jogo. Para tornar o jogo simples eu assumi que o sol sempre nasce no LESTE e sempre se poem no OESTE. Assim, é possível saber exatamente onde fica a direção do objetivo e chegar na ilha para entregar as encomendas, ganhar 10 pontos e receber uma nova missão. Além disso, o jogador ganha um upgrade do navio, que pode ser aumentar a velocidade em 10 ou aumentar a pontuação em 1.</p>

<p>Infelizmente levei boa parte dos dois dias para programar esta mecânica e fazer a arte necessária, então o resto do jogo saiu bem diferente do que planejei. A ideia inicial era que o jogador poderia escolher qual missão queria, sendo que elas iriam variar entre perto, médio e longe, e a distancia e recompensa seriam diferentes para cada uma. Também pensei em um upgrade de carga que faria o jogador poder aceitar entregas maiores. </p>

<p>O jogo terminaria em 7 dias de trabalho, sendo que cada dia o jogador teria 12 horas para fazer as missões, que consumiriam as horas de acordo com a distância navegada. No fim, não foi possível fazer nada disso e implementei uma pontuação simples onde o jogador tem 5 minutes (300 segundos) para fazer o máximo de pontos até o tempo acabar. </p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/08/sunstone-4.jpg" alt="Minha participação no Ludum Dare #36"></p>

<p><strong>Programação</strong></p>

<p>Repeti o mesmo erro consciente de usar uma engine/framework que não uso há um tempo ou que é novo para mim. No <a href="http://gamedeveloper.com.br/ludum-dare-35/">Ludum Dare anterior</a> utilizei a Defold, que era nova pra mim. Desta vez utilizei uma velha conhecida, porém que não usava há alguns anos, a <a href="http://www.cocos2d-x.org/">Cocos2d-x</a>. </p>

<p>Atualmente a Cocos2d-x está na versão 3.12, e na última vez que utilizei estava na versão 2.X. Muita coisa mudou, muita mesmo, desde nome de classes até a maneira de utilizar algumas coisas. Na época nem tinha suporte ao C++11 e hoje está presente em praticamente tudo neste framework. Acabei não tendo tempo de me atualizar, então comecei a utilizar a versão mais nova da Cocos2d-x mais ou menos do jeito que eu lembrava, e sempre que esbarrava em algo consultava a documentação online (que hoje está muito boa e completa).</p>

<p>Desta vez decidi que o foco do meu jogo seria mobile, então desenvolvi no Mac OS X usando Xcode, sempre testando no emulador e em um aparelho Android. A Cocos2d-x está muito melhor hoje, e é bem simples compilar e testar outras plataformas sem precisar abrir outra IDE ou tools utilizando a linha de comando. Devido essa facilidade, era bem rápido testar. Eu desenvolvia no Xcode e testava no emulado, mas quando necessário rodava um simples comando para fazer o deploy e testar em um aparelho Android. Depois da compilação inicial que demora alguns minutos fica bem rápido, compilando apenas as alterações no código. </p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/08/sunstone-1.jpg" alt="Minha participação no Ludum Dare #36"></p>

<p>Nos últimos anos trabalhei muito com Unity, usando C#, e com HTML5, usando Javascript, e estava sentido falta de programar em C++. Praticamente desde a EA fechou em 2013 eu não programava em C++, e é uma sensação incrível pra mim. Vou tentar utilizar C++ com mais frequência, e também me atualizar com o C++11. </p>

<p>Este foi o primeiro Ludum Dare que utilizei um framework para fazer o jogo, sendo que nos quatro anteriores utilizei três vezes a Unity e uma vez a Defold, ambas game engines. Desenvolver um jogo sem algumas facilidades visuais que uma game engine tem dá mais trabalho, mas mesmo assim não me arrependo de ter utilizado a Cocos2d-x. Mas me arrependo de não ter utilizado algumas tools externas como <a href="https://www.codeandweb.com/texturepacker">TexturePacker</a> e <a href="http://www.mapeditor.org/">Tiled</a> para me ajudar no desenvolvimento. </p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/08/sunstone-3-1.jpg" alt="Minha participação no Ludum Dare #36"></p>

<p><strong>Arte</strong></p>

<p>Não fiquei tão feliz com a arte como na <a href="http://gamedeveloper.com.br/ludum-dare-35/">minha participação anterior</a>, mas mesmo assim foi muito melhor do que minhas demais participações. Mesmo sendo uma arte simples, fique feliz com o meu barco e a ilha. As nuvens foram um detalhe legal, e se você reparar elas se movem lentamente pela tela, sem tampar o campo de visão no centro da tela. Minha Sunstone ficou aceitável, porém não fazia ideia de como representá-la e esta foi minha melhor arte.</p>

<p>Infelizmente não consegui fazer música e efeitos sonoros. Esta foi a primeira vez que não coloquei nem efeitos sonoros, e a segunda vez que não coloquei música em um jogo no Ludum Dare. Acabei deixando para depois e não sobrou tempo, sendo que fiz a mecânica de pontuação na última meia hora antes das 48 horas acabarem.</p>

<p><img src="http://gamedeveloper.com.br/content/images/2016/08/sunstone-5.jpg" alt="Minha participação no Ludum Dare #36"></p>

<p><strong>Conclusão</strong></p>

<p>Na minha última participação fique feliz com a programação e a arte, mas deixei o game design de lado. Desta vez foquei tanto no game design que pensei em um jogo grande demais para eu fazer em 48 horas, e isso acabou afetando a arte (ficou simples e sem som) e a programação (nas últimas horas a qualidade do código ficou bem ruim). Não fiquei feliz com o resultado, mas ainda assim fiquei feliz em ter participado e pelas lições que aprendi desta vez.</p>

<p>Esta foi a primeira vez que não fiz uma build para Web, e sinceramente isto não fez falta. O jogo está funcionando bem em aparelhos Android, iOS (infelizmente não tem como colocar uma build para download, mas da pra compilar o projeto e testar), Mac e Windows (se você não viu esta build lá é por que ainda não atualizei, preciso compilar em um Windows). </p>

<p>Ainda não encontrei um equilíbrio bom entre Arte, Programação e Game Design, mas acredito que estou chegando perto de saber a dose certa de atenção que devo ter em cada área para fazer um jogo completo em 48 horas. Desta vez tive praticamente as 48 horas livres, dormi bastante de sexta pra sábado e pouco de sábado para domingo. No fim não foi um grande problema, pois mesmo com 48 horas sem dormir o jogo ainda estaria grade demais para eu fazer em 48 horas do jeito que imaginei. </p>

<p>O código do jogo está disponível no <a href="https://github.com/cicanci/game-cocos2dx-ld36">GitHub</a> e na <a href="http://ludumdare.com/compo/ludum-dare-36/?action=preview&amp;uid=52021">página do jogo no Ludum Dare</a> existem mais informações sobre como baixar e jogar. O próximo Ludum Dare será em dezembro e já estou bem ansioso! Talvez eu tente novamente utilizando C++, porém ainda estou em dúvida se utilizo Unreal Engine ou chuto o balde e tento fazer algo no Linux (já trabalhei usando Ubuntu e Debian para programar backend, mas nunca um jogo). Talvez eu mude de ideia até lá e utilize algo diferente, ou algo que já usei. Na verdade não sei ainda, mas já estou ansioso para a próxima vez. </p>]]></content:encoded></item></channel></rss>